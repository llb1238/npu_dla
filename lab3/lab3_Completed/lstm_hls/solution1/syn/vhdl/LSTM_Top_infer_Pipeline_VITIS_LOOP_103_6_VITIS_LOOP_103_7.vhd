-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LSTM_Top_infer_Pipeline_VITIS_LOOP_103_6_VITIS_LOOP_103_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vec_i_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    vec_i_ce0 : OUT STD_LOGIC;
    vec_i_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    gate_i_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    gate_i_ce0 : OUT STD_LOGIC;
    gate_i_we0 : OUT STD_LOGIC;
    gate_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    gate_i_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    gate_i_ce1 : OUT STD_LOGIC;
    gate_i_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_374_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_374_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_374_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_374_p_ce : OUT STD_LOGIC;
    grp_fu_378_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_378_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_378_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_378_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_378_p_ce : OUT STD_LOGIC );
end;


architecture behav of LSTM_Top_infer_Pipeline_VITIS_LOOP_103_6_VITIS_LOOP_103_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_4E00 : STD_LOGIC_VECTOR (14 downto 0) := "100111000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_9C : STD_LOGIC_VECTOR (7 downto 0) := "10011100";
    constant ap_const_lv15_9C : STD_LOGIC_VECTOR (14 downto 0) := "000000010011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln103_reg_272 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Weight0_i_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal Weight0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln103_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_reg_272_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln103_fu_155_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln103_reg_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln103_1_fu_163_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln103_1_reg_283 : STD_LOGIC_VECTOR (7 downto 0);
    signal first_iter_1_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_1_reg_290 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_1_reg_290_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gate_i_addr_reg_294 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal gate_i_addr_reg_294_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln103_2_fu_202_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln103_2_reg_300 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln103_2_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_2_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_2_reg_310_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gate_i_load_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal vec_i_load_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal Weight0_i_load_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal mul2_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln103_fu_182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln103_1_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_3_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal c_fu_40 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln103_1_fu_208_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal r_fu_44 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_sig_allocacmp_r_load : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten11_fu_48 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal add_ln103_3_fu_131_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_indvar_flatten11_load : STD_LOGIC_VECTOR (14 downto 0);
    signal add6931_fu_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal gate_i_ce1_local : STD_LOGIC;
    signal gate_i_we0_local : STD_LOGIC;
    signal gate_i_ce0_local : STD_LOGIC;
    signal vec_i_ce0_local : STD_LOGIC;
    signal Weight0_i_ce0_local : STD_LOGIC;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal icmp_ln103_1_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln103_fu_143_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln103_fu_189_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln103_fu_189_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln103_fu_189_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln103_2_fu_199_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal mul_ln103_fu_189_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component LSTM_Top_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LSTM_Top_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LSTM_Top_mul_8ns_9ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component LSTM_Top_infer_Pipeline_VITIS_LOOP_103_6_VITIS_LOOP_103_7_Weight0_i_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LSTM_Top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    Weight0_i_U : component LSTM_Top_infer_Pipeline_VITIS_LOOP_103_6_VITIS_LOOP_103_7_Weight0_i_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 19968,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Weight0_i_address0,
        ce0 => Weight0_i_ce0_local,
        q0 => Weight0_i_q0);

    mul_8ns_9ns_15_1_1_U33 : component LSTM_Top_mul_8ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln103_fu_189_p0,
        din1 => mul_ln103_fu_189_p1,
        dout => mul_ln103_fu_189_p2);

    flow_control_loop_pipe_sequential_init_U : component LSTM_Top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    add6931_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                if (((first_iter_1_reg_290_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add6931_fu_52 <= gate_i_load_reg_314;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add6931_fu_52 <= add2_reg_344;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    c_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                c_fu_40 <= ap_const_lv8_0;
            elsif (((icmp_ln103_reg_272 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                c_fu_40 <= add_ln103_1_fu_208_p2;
            end if; 
        end if;
    end process;

    indvar_flatten11_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln103_fu_125_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten11_fu_48 <= add_ln103_3_fu_131_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten11_fu_48 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;

    r_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                r_fu_44 <= ap_const_lv8_0;
            elsif (((icmp_ln103_reg_272 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                r_fu_44 <= select_ln103_1_reg_283;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                Weight0_i_load_reg_329 <= Weight0_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add2_reg_344 <= grp_fu_378_p_dout0;
                first_iter_1_reg_290 <= first_iter_1_fu_171_p2;
                first_iter_1_reg_290_pp0_iter1_reg <= first_iter_1_reg_290;
                icmp_ln103_reg_272 <= icmp_ln103_fu_125_p2;
                icmp_ln103_reg_272_pp0_iter1_reg <= icmp_ln103_reg_272;
                select_ln103_1_reg_283 <= select_ln103_1_fu_163_p3;
                select_ln103_reg_276 <= select_ln103_fu_155_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln103_2_reg_300 <= add_ln103_2_fu_202_p2;
                gate_i_addr_reg_294 <= zext_ln103_fu_182_p1(7 - 1 downto 0);
                gate_i_addr_reg_294_pp0_iter1_reg <= gate_i_addr_reg_294;
                icmp_ln103_2_reg_310 <= icmp_ln103_2_fu_213_p2;
                icmp_ln103_2_reg_310_pp0_iter1_reg <= icmp_ln103_2_reg_310;
                mul2_reg_334 <= grp_fu_374_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                gate_i_load_reg_314 <= gate_i_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                vec_i_load_reg_324 <= vec_i_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter1_stage1, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    Weight0_i_address0 <= zext_ln103_3_fu_228_p1(15 - 1 downto 0);

    Weight0_i_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            Weight0_i_ce0_local <= ap_const_logic_1;
        else 
            Weight0_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln103_1_fu_208_p2 <= std_logic_vector(unsigned(select_ln103_reg_276) + unsigned(ap_const_lv8_1));
    add_ln103_2_fu_202_p2 <= std_logic_vector(unsigned(mul_ln103_fu_189_p2) + unsigned(zext_ln103_2_fu_199_p1));
    add_ln103_3_fu_131_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten11_load) + unsigned(ap_const_lv15_1));
    add_ln103_fu_143_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_load) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln103_reg_272)
    begin
        if (((icmp_ln103_reg_272 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln103_reg_272_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln103_reg_272_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, c_fu_40, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_40;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten11_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, indvar_flatten11_fu_48)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten11_load <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_indvar_flatten11_load <= indvar_flatten11_fu_48;
        end if; 
    end process;


    ap_sig_allocacmp_r_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, r_fu_44)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_r_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_r_load <= r_fu_44;
        end if; 
    end process;

    first_iter_1_fu_171_p2 <= "1" when (select_ln103_fu_155_p3 = ap_const_lv8_0) else "0";
    gate_i_address0 <= gate_i_addr_reg_294_pp0_iter1_reg;
    gate_i_address1 <= zext_ln103_fu_182_p1(7 - 1 downto 0);
    gate_i_ce0 <= gate_i_ce0_local;

    gate_i_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gate_i_ce0_local <= ap_const_logic_1;
        else 
            gate_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    gate_i_ce1 <= gate_i_ce1_local;

    gate_i_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gate_i_ce1_local <= ap_const_logic_1;
        else 
            gate_i_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    gate_i_d0 <= add2_reg_344;
    gate_i_we0 <= gate_i_we0_local;

    gate_i_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln103_2_reg_310_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln103_2_reg_310_pp0_iter1_reg = ap_const_lv1_1))) then 
            gate_i_we0_local <= ap_const_logic_1;
        else 
            gate_i_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_374_p_ce <= ap_const_logic_1;
    grp_fu_374_p_din0 <= Weight0_i_load_reg_329;
    grp_fu_374_p_din1 <= vec_i_load_reg_324;
    grp_fu_378_p_ce <= ap_const_logic_1;
    grp_fu_378_p_din0 <= add6931_fu_52;
    grp_fu_378_p_din1 <= mul2_reg_334;
    grp_fu_378_p_opcode <= ap_const_lv2_0;
    icmp_ln103_1_fu_149_p2 <= "1" when (ap_sig_allocacmp_c_load = ap_const_lv8_9C) else "0";
    icmp_ln103_2_fu_213_p2 <= "1" when (add_ln103_1_fu_208_p2 = ap_const_lv8_9C) else "0";
    icmp_ln103_fu_125_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten11_load = ap_const_lv15_4E00) else "0";
    mul_ln103_fu_189_p0 <= mul_ln103_fu_189_p00(8 - 1 downto 0);
    mul_ln103_fu_189_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln103_1_reg_283),15));
    mul_ln103_fu_189_p1 <= ap_const_lv15_9C(9 - 1 downto 0);
    select_ln103_1_fu_163_p3 <= 
        add_ln103_fu_143_p2 when (icmp_ln103_1_fu_149_p2(0) = '1') else 
        ap_sig_allocacmp_r_load;
    select_ln103_fu_155_p3 <= 
        ap_const_lv8_0 when (icmp_ln103_1_fu_149_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
    vec_i_address0 <= zext_ln103_1_fu_195_p1(8 - 1 downto 0);
    vec_i_ce0 <= vec_i_ce0_local;

    vec_i_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            vec_i_ce0_local <= ap_const_logic_1;
        else 
            vec_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln103_1_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln103_reg_276),64));
    zext_ln103_2_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln103_reg_276),15));
    zext_ln103_3_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln103_2_reg_300),64));
    zext_ln103_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln103_1_reg_283),64));
end behav;
