-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity LSTM_Top_infer_Pipeline_VITIS_LOOP_34_13_Bias0_c_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of LSTM_Top_infer_Pipeline_VITIS_LOOP_34_13_Bias0_c_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110010111011110100011011100", 1 => "10111101111001100001110101010000", 2 => "00111110011010111010001000010110", 3 => "00111101110010101001010000001111", 
    4 => "00111110101110011111011110111100", 5 => "00111101111000000111101111001001", 6 => "10111101110011010111010101011100", 7 => "10111101110100110100111111010011", 
    8 => "10111110011011010011110000100010", 9 => "00111110000011100110111011111001", 10 => "10111101111000011011111100111000", 11 => "10111101011000000001000011011111", 
    12 => "10111100000110001010011010001000", 13 => "10111110001110001110111001101100", 14 => "10111110011001000011001010000111", 15 => "00111101011000010100001100101100", 
    16 => "10111101011101011101010111000101", 17 => "10111101010100011011100011111011", 18 => "10111100001001101000001010101011", 19 => "00111101111010000001010010101111", 
    20 => "00111100000110000010010100000100", 21 => "00111110000110110111101000000001", 22 => "00111100101001011100101000011111", 23 => "10111100110100011111101110110000", 
    24 => "00111101000101011101100110101001", 25 => "10111101101110110011010011010001", 26 => "10111110111001111001010101000101", 27 => "10111110011010110001110011010111", 
    28 => "00111101111010111010101100000111", 29 => "10111101011000100010010000001100", 30 => "00111110000010101010011101001011", 31 => "10111101111111111111100111011110", 
    32 => "00111101101011100011011011001111", 33 => "00111101001010011000011011101010", 34 => "00111101100111010111010111010010", 35 => "10111110001011101001100110101101", 
    36 => "10111101101100000010010111110101", 37 => "00111101111101110101010110010101", 38 => "00111011111110001101101101101111", 39 => "00111101110100001001110000100010", 
    40 => "10111101100001010010110111110001", 41 => "00111110000100111001010100000010", 42 => "10111100000110101110001010100111", 43 => "00111101011110111110000010100100", 
    44 => "00111101101000011110101010001011", 45 => "10111110000100101001101010011011", 46 => "00111110010101110100110010000011", 47 => "00111110011110000111000000101100", 
    48 => "00111100011000110000000011101100", 49 => "10111110000110000010101110100110", 50 => "00111100001001100111011010001100", 51 => "00111100111110000011111010001011", 
    52 => "10111101111000010111101100111000", 53 => "00111100110110100001101000100010", 54 => "10111110000100000110110010101111", 55 => "00111100101000000100010010010100", 
    56 => "00111110010110110001100100101011", 57 => "00111101101001001000111001000010", 58 => "10111101100001001000100110001001", 59 => "10111110000100110101010000100000", 
    60 => "00111100111010001000111100100000", 61 => "10111110000010111011000111000011", 62 => "10111101110110001010101000011011", 63 => "10111101010011001101001001110110", 
    64 => "10111101110100110011011011011111", 65 => "10111101101110100110101110100101", 66 => "10111101011010101101110100000110", 67 => "00111011011100101100110010101111", 
    68 => "10111100001101110001100100000110", 69 => "10111100100100011101001001111011", 70 => "10111101001100110111100010110011", 71 => "00111101101110010000000001010100", 
    72 => "10111110101001100000000111101000", 73 => "10111101100101110110111100000111", 74 => "00111110101001111111011001000011", 75 => "00111100001110110110111011100001", 
    76 => "10111110101101000010000011101101", 77 => "10111101010111001000101001010101", 78 => "00111110011011010110111011011011", 79 => "00111101101111001110101000011010", 
    80 => "00111101011111101011000110011001", 81 => "00111101101111010000100111001000", 82 => "00111101101001001011000101001101", 83 => "00111110000010011101101110110110", 
    84 => "00111110000001111000001001011011", 85 => "10111101010010111100000000011000", 86 => "00111110010010010101010011111000", 87 => "00111110000000101101111100100001", 
    88 => "00111110000000100011100110110001", 89 => "00111101010000111000000100011100", 90 => "00111110000100100001111011101101", 91 => "10111101000001111110100001000100", 
    92 => "00111110000101010010011101011000", 93 => "00111101111011111010001010100000", 94 => "10111110000110000111111010000011", 95 => "00111101000101001100000001111111", 
    96 => "00111100001001000000110001011001", 97 => "10111110011000001100111100010001", 98 => "00111101100110101111001100111001", 99 => "10111101001111011000100011101010", 
    100 => "10111101000011001001101010100110", 101 => "00111110011000001100001111100000", 102 => "10111101110011011110101010010111", 103 => "10111011110101001000100000000100", 
    104 => "10111110010111110010010001000101", 105 => "10111101110011100001000000100001", 106 => "00111101110010101111010111000100", 107 => "00111100001011110111101101100011", 
    108 => "00111110000011010011101011100111", 109 => "10111110110000111110010110001101", 110 => "00111101000011011000010101000100", 111 => "00111100000010100110111011111100", 
    112 => "00111110100001111011100110111000", 113 => "10111110001110010011100100110110", 114 => "00111011000110100100000001100010", 115 => "00111101101101000110011011111101", 
    116 => "00111101001011010001001010110011", 117 => "00111101100010110001111010101101", 118 => "10111110000000101100010000010100", 119 => "10111101100101011100000101001011", 
    120 => "10111100110001000111101110100101", 121 => "10111101110101000011110111101000", 122 => "10111100110010000000011100111011", 123 => "00111101111000101100011011101111", 
    124 => "00111101001100001010110010101011", 125 => "00111101100010010011101000010000", 126 => "10111101001000011101001000100010", 127 => "00111101111111010000001110001001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

