// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module LSTM_Top_infer_Pipeline_VITIS_LOOP_141_12_VITIS_LOOP_141_13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        h_t_address0,
        h_t_ce0,
        h_t_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_address1,
        res_ce1,
        res_q1,
        grp_fu_173_p_din0,
        grp_fu_173_p_din1,
        grp_fu_173_p_opcode,
        grp_fu_173_p_dout0,
        grp_fu_173_p_ce,
        grp_fu_169_p_din0,
        grp_fu_169_p_din1,
        grp_fu_169_p_dout0,
        grp_fu_169_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] h_t_address0;
output   h_t_ce0;
input  [31:0] h_t_q0;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;
output  [3:0] res_address1;
output   res_ce1;
input  [31:0] res_q1;
output  [31:0] grp_fu_173_p_din0;
output  [31:0] grp_fu_173_p_din1;
output  [1:0] grp_fu_173_p_opcode;
input  [31:0] grp_fu_173_p_dout0;
output   grp_fu_173_p_ce;
output  [31:0] grp_fu_169_p_din0;
output  [31:0] grp_fu_169_p_din1;
input  [31:0] grp_fu_169_p_dout0;
output   grp_fu_169_p_ce;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln141_reg_278;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [10:0] Weight_lc_address0;
wire   [31:0] Weight_lc_q0;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln141_fu_131_p2;
wire   [7:0] select_ln141_fu_161_p3;
reg   [7:0] select_ln141_reg_282;
wire   [3:0] select_ln141_1_fu_169_p3;
reg   [3:0] select_ln141_1_reg_289;
wire   [0:0] first_iter_4_fu_177_p2;
reg   [0:0] first_iter_4_reg_295;
reg   [3:0] res_addr_reg_299;
reg   [3:0] res_addr_reg_299_pp0_iter1_reg;
reg   [31:0] res_load_reg_305;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln141_2_fu_223_p2;
reg   [0:0] icmp_ln141_2_reg_320;
reg   [0:0] icmp_ln141_2_reg_320_pp0_iter1_reg;
reg   [31:0] Weight_lc_load_reg_324;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] h_t_load_reg_329;
reg   [31:0] mul_reg_334;
reg   [31:0] add_reg_344;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln141_fu_183_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln141_3_fu_213_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln141_1_fu_200_p1;
reg   [7:0] c_fu_46;
wire   [7:0] add_ln141_1_fu_218_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_c_load;
reg   [3:0] r_fu_50;
reg   [3:0] ap_sig_allocacmp_r_load;
reg   [10:0] indvar_flatten32_fu_54;
wire   [10:0] add_ln141_3_fu_137_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten32_load;
reg   [31:0] add18229_fu_58;
reg    res_ce1_local;
reg    res_we0_local;
reg    res_ce0_local;
reg    Weight_lc_ce0_local;
reg    h_t_ce0_local;
wire    ap_block_pp0_stage3;
wire   [0:0] icmp_ln141_1_fu_155_p2;
wire   [3:0] add_ln141_fu_149_p2;
wire   [10:0] tmp_5_fu_193_p3;
wire   [10:0] zext_ln141_2_fu_204_p1;
wire   [10:0] add_ln141_2_fu_207_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_block_pp0_stage1_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 c_fu_46 = 8'd0;
#0 r_fu_50 = 4'd0;
#0 indvar_flatten32_fu_54 = 11'd0;
#0 add18229_fu_58 = 32'd0;
#0 ap_done_reg = 1'b0;
end

LSTM_Top_infer_Pipeline_VITIS_LOOP_141_12_VITIS_LOOP_141_13_Weight_lc_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
Weight_lc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Weight_lc_address0),
    .ce0(Weight_lc_ce0_local),
    .q0(Weight_lc_q0)
);

LSTM_Top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((first_iter_4_reg_295 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add18229_fu_58 <= res_load_reg_305;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add18229_fu_58 <= add_reg_344;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        c_fu_46 <= 8'd0;
    end else if (((icmp_ln141_reg_278 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_fu_46 <= add_ln141_1_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln141_fu_131_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten32_fu_54 <= add_ln141_3_fu_137_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten32_fu_54 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        r_fu_50 <= 4'd0;
    end else if (((icmp_ln141_reg_278 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        r_fu_50 <= select_ln141_1_reg_289;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        Weight_lc_load_reg_324 <= Weight_lc_q0;
        h_t_load_reg_329 <= h_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_reg_344 <= grp_fu_173_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_iter_4_reg_295 <= first_iter_4_fu_177_p2;
        icmp_ln141_reg_278 <= icmp_ln141_fu_131_p2;
        mul_reg_334 <= grp_fu_169_p_dout0;
        res_addr_reg_299 <= zext_ln141_fu_183_p1;
        res_addr_reg_299_pp0_iter1_reg <= res_addr_reg_299;
        select_ln141_1_reg_289 <= select_ln141_1_fu_169_p3;
        select_ln141_reg_282 <= select_ln141_fu_161_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln141_2_reg_320 <= icmp_ln141_2_fu_223_p2;
        icmp_ln141_2_reg_320_pp0_iter1_reg <= icmp_ln141_2_reg_320;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_load_reg_305 <= res_q1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Weight_lc_ce0_local = 1'b1;
    end else begin
        Weight_lc_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln141_reg_278 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln141_reg_278 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c_load = 8'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten32_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten32_load = indvar_flatten32_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_r_load = 4'd0;
    end else begin
        ap_sig_allocacmp_r_load = r_fu_50;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        h_t_ce0_local = 1'b1;
    end else begin
        h_t_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_ce0_local = 1'b1;
    end else begin
        res_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_ce1_local = 1'b1;
    end else begin
        res_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln141_2_reg_320_pp0_iter1_reg == 1'd1))) begin
        res_we0_local = 1'b1;
    end else begin
        res_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Weight_lc_address0 = zext_ln141_3_fu_213_p1;

assign add_ln141_1_fu_218_p2 = (select_ln141_reg_282 + 8'd1);

assign add_ln141_2_fu_207_p2 = (tmp_5_fu_193_p3 + zext_ln141_2_fu_204_p1);

assign add_ln141_3_fu_137_p2 = (ap_sig_allocacmp_indvar_flatten32_load + 11'd1);

assign add_ln141_fu_149_p2 = (ap_sig_allocacmp_r_load + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign ap_ready = ap_ready_sig;

assign first_iter_4_fu_177_p2 = ((select_ln141_fu_161_p3 == 8'd0) ? 1'b1 : 1'b0);

assign grp_fu_169_p_ce = 1'b1;

assign grp_fu_169_p_din0 = Weight_lc_load_reg_324;

assign grp_fu_169_p_din1 = h_t_load_reg_329;

assign grp_fu_173_p_ce = 1'b1;

assign grp_fu_173_p_din0 = add18229_fu_58;

assign grp_fu_173_p_din1 = mul_reg_334;

assign grp_fu_173_p_opcode = 2'd0;

assign h_t_address0 = zext_ln141_1_fu_200_p1;

assign h_t_ce0 = h_t_ce0_local;

assign icmp_ln141_1_fu_155_p2 = ((ap_sig_allocacmp_c_load == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln141_2_fu_223_p2 = ((add_ln141_1_fu_218_p2 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln141_fu_131_p2 = ((ap_sig_allocacmp_indvar_flatten32_load == 11'd1280) ? 1'b1 : 1'b0);

assign res_address0 = res_addr_reg_299_pp0_iter1_reg;

assign res_address1 = zext_ln141_fu_183_p1;

assign res_ce0 = res_ce0_local;

assign res_ce1 = res_ce1_local;

assign res_d0 = add_reg_344;

assign res_we0 = res_we0_local;

assign select_ln141_1_fu_169_p3 = ((icmp_ln141_1_fu_155_p2[0:0] == 1'b1) ? add_ln141_fu_149_p2 : ap_sig_allocacmp_r_load);

assign select_ln141_fu_161_p3 = ((icmp_ln141_1_fu_155_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_c_load);

assign tmp_5_fu_193_p3 = {{select_ln141_1_reg_289}, {7'd0}};

assign zext_ln141_1_fu_200_p1 = select_ln141_reg_282;

assign zext_ln141_2_fu_204_p1 = select_ln141_reg_282;

assign zext_ln141_3_fu_213_p1 = add_ln141_2_fu_207_p2;

assign zext_ln141_fu_183_p1 = select_ln141_1_fu_169_p3;

endmodule //LSTM_Top_infer_Pipeline_VITIS_LOOP_141_12_VITIS_LOOP_141_13
