-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_Bias0_i_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_Bias0_i_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100101101011010011101111", 
    1 => "00111100110100101101100000101111", 
    2 => "10111110001101110001100101010111", 
    3 => "10111110000010011110111010001001", 
    4 => "00111110110100000110110000010101", 
    5 => "10111101101011000101100011011100", 
    6 => "10111101100010110100011011111111", 
    7 => "10111101000001100000110010100010", 
    8 => "10111101011101010101101001011000", 
    9 => "10111110100011000011110000000001", 
    10 => "10111110111111110111011101111010", 
    11 => "10111001000101000001000010000010", 
    12 => "00111110101100010101011001011001", 
    13 => "00111110010110100111011101111011", 
    14 => "10111110101011100111000001100000", 
    15 => "10111110100101111110110100000101", 
    16 => "00111101111101001010101101101110", 
    17 => "10111101111010110001011000000110", 
    18 => "00111100001100010000001101000011", 
    19 => "10111101100000100011110111101100", 
    20 => "00111110001110110110110010001000", 
    21 => "10111110110101101100110101111101", 
    22 => "10111110000100001111110000101111", 
    23 => "00111100101101000101001000010010", 
    24 => "00111100100111011011001011001001", 
    25 => "10111110000110111011100010110110", 
    26 => "00111101111101011100101001111010", 
    27 => "00111110001110111110000110000000", 
    28 => "10111101100110101010001110110010", 
    29 => "10111110101001100111001101000101", 
    30 => "00111100110010110110000111110011", 
    31 => "10111101111111010100110010010010", 
    32 => "00111101110000001000111001111110", 
    33 => "00111110011100001101001011001010", 
    34 => "00111110010010111010110101110111", 
    35 => "00111110010001001110110111110110", 
    36 => "00111101111001011111101100111100", 
    37 => "00111101001101010000111011101110", 
    38 => "10111101100110111100011010100000", 
    39 => "00111101101010100100011101000111", 
    40 => "00111110011100101111010001010110", 
    41 => "00111110100111000101001001000011", 
    42 => "00111110101111000010001000111001", 
    43 => "00111110110111100010101001101001", 
    44 => "00111110110111010101000000000100", 
    45 => "00111110010101100001110000011100", 
    46 => "10111100111010011111101011100000", 
    47 => "10111100000011100101010111010010", 
    48 => "10111110000111101001011111011110", 
    49 => "10111101001100110101100001011010", 
    50 => "10111101101001011010000100101011", 
    51 => "10111110100100011110000001110010", 
    52 => "10111101111000100100001011000011", 
    53 => "10111110001001110100000001010010", 
    54 => "10111101111100000111001111011110", 
    55 => "10111110001110011100110010100100", 
    56 => "10111110100001010100110111100101", 
    57 => "10111101001101001100111001110001", 
    58 => "10111110000100111110001010001100", 
    59 => "10111110001110101100001111111001", 
    60 => "10111101101000001111001000011011", 
    61 => "00111110100000111011001011010011", 
    62 => "00111110001111110101101010010110", 
    63 => "00111100110001100000101100110010", 
    64 => "10111110000011100001001100011110", 
    65 => "00111101100100001100011101110010", 
    66 => "00111101100010110011110010111010", 
    67 => "10111011101110101011110000110110", 
    68 => "00111110001101101110111100010101", 
    69 => "10111101001101011111101010010110", 
    70 => "10111110000011010101000010010100", 
    71 => "00111101101100010011100001010010", 
    72 => "10111101010111110000000111010001", 
    73 => "00111110000000000110000101110111", 
    74 => "10111101101101010000011110100001", 
    75 => "10111101011011001110010110100100", 
    76 => "10111101001101011100110110001101", 
    77 => "00111110001010000100010001011110", 
    78 => "00111100101010100101100010010100", 
    79 => "10111101111101110111100010101000", 
    80 => "00111101000010000010110001110111", 
    81 => "00111100111101010101010011111100", 
    82 => "00111101100101001010100011000000", 
    83 => "10111101110101000001111010110110", 
    84 => "00111100110100100111110111110111", 
    85 => "10111101111000111001000110111011", 
    86 => "00111101110001001101110100111000", 
    87 => "00111011101111101100101101000100", 
    88 => "10111101010011010010111111010111", 
    89 => "00111101110110111011101101010101", 
    90 => "10111110110000001110100011011001", 
    91 => "10111101110001100011101100000001", 
    92 => "00111100100111110011001110000111", 
    93 => "10111101100010101000001001000111", 
    94 => "00111011111111001110000100100101", 
    95 => "10111101110101111111110111111011", 
    96 => "00111110000101101111000110110100", 
    97 => "10111101100010000010011000001011", 
    98 => "00111101101111100000110010001001", 
    99 => "10111110101000101111100111011000", 
    100 => "00111011101011001100111011111100", 
    101 => "10111110000100100110111101101000", 
    102 => "10111101111001101111010000101011", 
    103 => "00111100111011011101100111101000", 
    104 => "00111101001001110111000010110010", 
    105 => "00111100100010011010000010011000", 
    106 => "10111110010100011100111101111000", 
    107 => "10111101100011001101001010111001", 
    108 => "00111100100010101111010011111100", 
    109 => "00111101000011101000001101111110", 
    110 => "00111101000100011010111000011110", 
    111 => "10111101010010010001010001011001", 
    112 => "10111100101111011110011100010110", 
    113 => "10111110001100101011010000001001", 
    114 => "10111101000111101111100000110000", 
    115 => "00111101110110110011100100110100", 
    116 => "00111101001111111100000110101100", 
    117 => "00111101100100101100010110110010", 
    118 => "10111101011111100110111101100010", 
    119 => "00111101001100110111101100010100", 
    120 => "10111101011001001100101110001001", 
    121 => "10111101110001100111010101011001", 
    122 => "10111110000000111101011010100110", 
    123 => "10111101011100100000110001000100", 
    124 => "10111101110101001001100011000100", 
    125 => "10111101001010100001001001010000", 
    126 => "10111100111010010011010001011100", 
    127 => "00111101001001011010111011001001" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_Bias0_i is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_Bias0_i is
    component infer_Bias0_i_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_Bias0_i_rom_U :  component infer_Bias0_i_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


