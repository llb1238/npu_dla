-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_Bias0_o_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_Bias0_o_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110111001101100000101110001", 
    1 => "00111110011011100101101110001100", 
    2 => "10111101111000100101101000011000", 
    3 => "00111100000001110010100110010001", 
    4 => "00111110101001100111101001011001", 
    5 => "00111110101111000001110101110100", 
    6 => "00111101001011011011000010000010", 
    7 => "00111110000010001101100011011111", 
    8 => "00111110011001101111111001001001", 
    9 => "10111101110111111100000001011010", 
    10 => "10111110010111011110101101011001", 
    11 => "00111100110011010010011111001100", 
    12 => "00111101010111000011111010101101", 
    13 => "00111110100100000110100000111010", 
    14 => "00111101001011000011011010110000", 
    15 => "10111110000110010100011011101011", 
    16 => "00111110110100101001101001011000", 
    17 => "00111100000111011001010111000100", 
    18 => "00111110100110001100110010011110", 
    19 => "00111101101100011111110010101101", 
    20 => "00111111000101100110001011100110", 
    21 => "10111110110000010011110001100010", 
    22 => "00111110010111011111010011010111", 
    23 => "00111101011001100101101010011101", 
    24 => "10111100110101010000001011010001", 
    25 => "00111110101111110111111011011011", 
    26 => "00111110010101100000001011010000", 
    27 => "00111101011000000010100111111001", 
    28 => "00111110110110110111010101110101", 
    29 => "10111101111010110110100111011011", 
    30 => "00111110101011110100111100010100", 
    31 => "00111110000101101010100000100101", 
    32 => "00111100101001001100100010110010", 
    33 => "00111110100100100001001000001011", 
    34 => "10111101100110001000010100100010", 
    35 => "00111101100000100110111100100000", 
    36 => "00111101001001010000000111001101", 
    37 => "00111110101111111000111001100011", 
    38 => "10111101110010000001100100100101", 
    39 => "00111110100001101111110111010111", 
    40 => "00111101110001001110110101010101", 
    41 => "10111110000010101010001111101001", 
    42 => "00111100100100010011001101100100", 
    43 => "00111101100101011101100101001000", 
    44 => "00111011101100001001100011000000", 
    45 => "10111110010111111111111010111110", 
    46 => "00111110001111111011011100101101", 
    47 => "10111101110001010011011111001011", 
    48 => "00111110100000000000110100111010", 
    49 => "00111101101100011001001000011010", 
    50 => "00111110010001100001001100111001", 
    51 => "00111101111100101011101011100000", 
    52 => "00111101101100110110100110000100", 
    53 => "00111101111100111100011000011011", 
    54 => "00111110101110100111010011111101", 
    55 => "10111101010001001011100011110111", 
    56 => "10111100101101110100011101111010", 
    57 => "10111100011110011000111001100001", 
    58 => "00111110101110010100110010101001", 
    59 => "00111100101011000000111011110010", 
    60 => "00111110100101011101000110110000", 
    61 => "10111100101111010010001011000000", 
    62 => "10111100000010010000001100101111", 
    63 => "10111101101110111111111101110010", 
    64 => "00111110010011001101010101100110", 
    65 => "10111101110001011000001011100111", 
    66 => "00111101111011111000011001010000", 
    67 => "00111101101101101100010010010111", 
    68 => "00111100000000111100001100011011", 
    69 => "10111101011000010001000011010111", 
    70 => "10111110000101101000010001010110", 
    71 => "00111100111010101100001101011101", 
    72 => "00111101111111000100011010001000", 
    73 => "00111111001001011000010001100011", 
    74 => "00111110010000011011110100001011", 
    75 => "10111101100000011101001000011000", 
    76 => "10111101101000000011111010001001", 
    77 => "00111100010101010111110111101100", 
    78 => "00111110011011110110010000100001", 
    79 => "10111101101000110110000100000111", 
    80 => "10111101111000001111110001110010", 
    81 => "00111101111011111101011000110111", 
    82 => "10111101110000011010000001001000", 
    83 => "00111100100101110101101011000000", 
    84 => "00111111001001011011110010001010", 
    85 => "00111101100111111000001011101001", 
    86 => "00111100110100000001001110111111", 
    87 => "00111110000010011010010100001110", 
    88 => "10111101101100101111101010000100", 
    89 => "10111100100101111111100111100010", 
    90 => "10111101101101000101000001111010", 
    91 => "00111101101000100100000101111111", 
    92 => "00111110010101100000001101010110", 
    93 => "00111110010001110011001101011111", 
    94 => "10111110001001001000100011110101", 
    95 => "00111110101011001010110001100110", 
    96 => "00111110100000100000011000100001", 
    97 => "10111110011110111011010101101111", 
    98 => "00111110001100110000001001101010", 
    99 => "00111101011111110001100110001110", 
    100 => "10111011000110101110000101100000", 
    101 => "00111101010100010110001110001000", 
    102 => "00111101101100010000000000110001", 
    103 => "00111100011110011000010001000110", 
    104 => "00111110011101111010111100001101", 
    105 => "00111100110110010001000111010101", 
    106 => "00111110001010110001010110111100", 
    107 => "00111101100000001001100101111010", 
    108 => "00111110001110101100110010111010", 
    109 => "00111101001001000010011110001101", 
    110 => "00111101111011000000000010100100", 
    111 => "00111110011100100011000010011111", 
    112 => "00111101111001010000011111011100", 
    113 => "00111101001000010101010001100001", 
    114 => "00111110100011111010100100100111", 
    115 => "00111110000000110000111000000111", 
    116 => "00111110011000000010010000011001", 
    117 => "10111110010000010011001111110111", 
    118 => "00111110001011000011011011100001", 
    119 => "10111101011111001111100001101100", 
    120 => "00111110011010101010010111100001", 
    121 => "00111110001101101000101000010100", 
    122 => "10111100100111110011111000001110", 
    123 => "00111101101010011101110110010110", 
    124 => "10111100101011000100001111010110", 
    125 => "00111101110111100010000110110001", 
    126 => "00111011111011100010110101100001", 
    127 => "00111110100111111100000010010000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_Bias0_o is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_Bias0_o is
    component infer_Bias0_o_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_Bias0_o_rom_U :  component infer_Bias0_o_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


