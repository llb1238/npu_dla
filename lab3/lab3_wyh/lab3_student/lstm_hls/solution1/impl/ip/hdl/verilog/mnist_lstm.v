// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mnist_lstm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TKEEP,
        in_r_TSTRB,
        in_r_TUSER,
        in_r_TLAST,
        in_r_TID,
        in_r_TDEST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        out_r_TID,
        out_r_TDEST
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_state19 = 6'd4;
parameter    ap_ST_fsm_state20 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state23 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [3:0] in_r_TKEEP;
input  [3:0] in_r_TSTRB;
input  [0:0] in_r_TUSER;
input  [0:0] in_r_TLAST;
input  [0:0] in_r_TID;
input  [0:0] in_r_TDEST;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [3:0] out_r_TKEEP;
output  [3:0] out_r_TSTRB;
output  [0:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [0:0] out_r_TID;
output  [0:0] out_r_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_TREADY;
reg out_r_TVALID;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln10_fu_252_p2;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln23_reg_325;
reg   [9:0] i_0_reg_192;
reg   [9:0] i_0_reg_192_pp0_iter1_reg;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
reg    ap_block_pp0_stage0_11001;
reg   [9:0] i_0_reg_192_pp0_iter2_reg;
reg   [9:0] i_0_reg_192_pp0_iter3_reg;
reg   [9:0] i_0_reg_192_pp0_iter4_reg;
reg   [9:0] i_0_reg_192_pp0_iter5_reg;
reg   [9:0] i_0_reg_192_pp0_iter6_reg;
reg   [9:0] i_0_reg_192_pp0_iter7_reg;
reg   [9:0] i_0_reg_192_pp0_iter8_reg;
reg   [9:0] i_0_reg_192_pp0_iter9_reg;
reg   [9:0] i_0_reg_192_pp0_iter10_reg;
reg   [9:0] i_0_reg_192_pp0_iter11_reg;
reg   [9:0] i_0_reg_192_pp0_iter12_reg;
reg   [9:0] i_0_reg_192_pp0_iter13_reg;
reg   [9:0] i_0_reg_192_pp0_iter14_reg;
reg   [9:0] i_0_reg_192_pp0_iter15_reg;
reg   [3:0] i1_0_reg_204;
reg   [0:0] icmp_ln10_reg_306;
reg   [0:0] icmp_ln10_reg_306_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter2_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter3_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter4_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter5_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter6_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter7_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter8_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter9_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter10_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter11_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter12_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter13_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter14_reg;
reg   [0:0] icmp_ln10_reg_306_pp0_iter15_reg;
wire   [9:0] i_fu_258_p2;
reg   [9:0] i_reg_310;
wire   [31:0] grp_fu_247_p2;
reg   [31:0] tmp_reg_320;
wire   [0:0] icmp_ln23_fu_278_p2;
wire    ap_block_state21_pp1_stage0_iter0;
wire    ap_block_state22_pp1_stage0_iter1;
reg    ap_block_state22_io;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] i_1_fu_284_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln26_fu_295_p2;
reg   [0:0] icmp_ln26_reg_339;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
wire    ap_CS_fsm_state20;
wire    grp_infer_fu_215_ap_ready;
wire    grp_infer_fu_215_ap_done;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg   [9:0] img_dat_address0;
reg    img_dat_ce0;
reg    img_dat_we0;
wire   [31:0] img_dat_q0;
reg   [3:0] res_address0;
reg    res_ce0;
reg    res_we0;
wire   [31:0] res_q0;
wire    grp_infer_fu_215_ap_start;
wire    grp_infer_fu_215_ap_idle;
wire   [9:0] grp_infer_fu_215_input_r_address0;
wire    grp_infer_fu_215_input_r_ce0;
wire   [3:0] grp_infer_fu_215_res_address0;
wire    grp_infer_fu_215_res_ce0;
wire    grp_infer_fu_215_res_we0;
wire   [31:0] grp_infer_fu_215_res_d0;
reg   [9:0] ap_phi_mux_i_0_phi_fu_196_p4;
reg    grp_infer_fu_215_ap_start_reg;
wire    ap_CS_fsm_state19;
wire   [63:0] zext_ln13_fu_273_p1;
wire   [63:0] zext_ln26_fu_290_p1;
wire    ap_block_pp1_stage0_01001;
wire   [31:0] grp_fu_247_p0;
reg    grp_fu_247_ce;
wire    ap_CS_fsm_state23;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 grp_infer_fu_215_ap_start_reg = 1'b0;
end

mnist_lstm_img_dat #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
img_dat_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(img_dat_address0),
    .ce0(img_dat_ce0),
    .we0(img_dat_we0),
    .d0(tmp_reg_320),
    .q0(img_dat_q0)
);

mnist_lstm_res #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
res_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(res_address0),
    .ce0(res_ce0),
    .we0(res_we0),
    .d0(grp_infer_fu_215_res_d0),
    .q0(res_q0)
);

infer grp_infer_fu_215(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_infer_fu_215_ap_start),
    .ap_done(grp_infer_fu_215_ap_done),
    .ap_idle(grp_infer_fu_215_ap_idle),
    .ap_ready(grp_infer_fu_215_ap_ready),
    .input_r_address0(grp_infer_fu_215_input_r_address0),
    .input_r_ce0(grp_infer_fu_215_input_r_ce0),
    .input_r_q0(img_dat_q0),
    .res_address0(grp_infer_fu_215_res_address0),
    .res_ce0(grp_infer_fu_215_res_ce0),
    .res_we0(grp_infer_fu_215_res_we0),
    .res_d0(grp_infer_fu_215_res_d0),
    .res_q0(res_q0)
);

LSTM_Top_fdiv_32nrcU #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LSTM_Top_fdiv_32nrcU_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_247_p0),
    .din1(32'd1132396544),
    .ce(grp_fu_247_ce),
    .dout(grp_fu_247_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter16 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state21))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((grp_infer_fu_215_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state21))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((grp_infer_fu_215_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_infer_fu_215_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            grp_infer_fu_215_ap_start_reg <= 1'b1;
        end else if ((grp_infer_fu_215_ap_ready == 1'b1)) begin
            grp_infer_fu_215_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i1_0_reg_204 <= i_1_fu_284_p2;
    end else if (((grp_infer_fu_215_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        i1_0_reg_204 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_306 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_192 <= i_reg_310;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_192 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_0_reg_192_pp0_iter10_reg <= i_0_reg_192_pp0_iter9_reg;
        i_0_reg_192_pp0_iter11_reg <= i_0_reg_192_pp0_iter10_reg;
        i_0_reg_192_pp0_iter12_reg <= i_0_reg_192_pp0_iter11_reg;
        i_0_reg_192_pp0_iter13_reg <= i_0_reg_192_pp0_iter12_reg;
        i_0_reg_192_pp0_iter14_reg <= i_0_reg_192_pp0_iter13_reg;
        i_0_reg_192_pp0_iter15_reg <= i_0_reg_192_pp0_iter14_reg;
        i_0_reg_192_pp0_iter2_reg <= i_0_reg_192_pp0_iter1_reg;
        i_0_reg_192_pp0_iter3_reg <= i_0_reg_192_pp0_iter2_reg;
        i_0_reg_192_pp0_iter4_reg <= i_0_reg_192_pp0_iter3_reg;
        i_0_reg_192_pp0_iter5_reg <= i_0_reg_192_pp0_iter4_reg;
        i_0_reg_192_pp0_iter6_reg <= i_0_reg_192_pp0_iter5_reg;
        i_0_reg_192_pp0_iter7_reg <= i_0_reg_192_pp0_iter6_reg;
        i_0_reg_192_pp0_iter8_reg <= i_0_reg_192_pp0_iter7_reg;
        i_0_reg_192_pp0_iter9_reg <= i_0_reg_192_pp0_iter8_reg;
        icmp_ln10_reg_306_pp0_iter10_reg <= icmp_ln10_reg_306_pp0_iter9_reg;
        icmp_ln10_reg_306_pp0_iter11_reg <= icmp_ln10_reg_306_pp0_iter10_reg;
        icmp_ln10_reg_306_pp0_iter12_reg <= icmp_ln10_reg_306_pp0_iter11_reg;
        icmp_ln10_reg_306_pp0_iter13_reg <= icmp_ln10_reg_306_pp0_iter12_reg;
        icmp_ln10_reg_306_pp0_iter14_reg <= icmp_ln10_reg_306_pp0_iter13_reg;
        icmp_ln10_reg_306_pp0_iter15_reg <= icmp_ln10_reg_306_pp0_iter14_reg;
        icmp_ln10_reg_306_pp0_iter2_reg <= icmp_ln10_reg_306_pp0_iter1_reg;
        icmp_ln10_reg_306_pp0_iter3_reg <= icmp_ln10_reg_306_pp0_iter2_reg;
        icmp_ln10_reg_306_pp0_iter4_reg <= icmp_ln10_reg_306_pp0_iter3_reg;
        icmp_ln10_reg_306_pp0_iter5_reg <= icmp_ln10_reg_306_pp0_iter4_reg;
        icmp_ln10_reg_306_pp0_iter6_reg <= icmp_ln10_reg_306_pp0_iter5_reg;
        icmp_ln10_reg_306_pp0_iter7_reg <= icmp_ln10_reg_306_pp0_iter6_reg;
        icmp_ln10_reg_306_pp0_iter8_reg <= icmp_ln10_reg_306_pp0_iter7_reg;
        icmp_ln10_reg_306_pp0_iter9_reg <= icmp_ln10_reg_306_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_192_pp0_iter1_reg <= i_0_reg_192;
        icmp_ln10_reg_306 <= icmp_ln10_fu_252_p2;
        icmp_ln10_reg_306_pp0_iter1_reg <= icmp_ln10_reg_306;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_310 <= i_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln23_reg_325 <= icmp_ln23_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln26_reg_339 <= icmp_ln26_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_306_pp0_iter14_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_320 <= grp_fu_247_p2;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_252_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln23_fu_278_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_306 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_196_p4 = i_reg_310;
    end else begin
        ap_phi_mux_i_0_phi_fu_196_p4 = i_0_reg_192;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_247_ce = 1'b1;
    end else begin
        grp_fu_247_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        img_dat_address0 = zext_ln13_fu_273_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        img_dat_address0 = grp_infer_fu_215_input_r_address0;
    end else begin
        img_dat_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_dat_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        img_dat_ce0 = grp_infer_fu_215_input_r_ce0;
    end else begin
        img_dat_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_306_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_dat_we0 = 1'b1;
    end else begin
        img_dat_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_252_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_TDATA_blk_n = in_r_TVALID;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_252_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln23_reg_325 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        out_r_TDATA_blk_n = out_r_TREADY;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_325 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        out_r_TVALID = 1'b1;
    end else begin
        out_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        res_address0 = zext_ln26_fu_290_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        res_address0 = grp_infer_fu_215_res_address0;
    end else begin
        res_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        res_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        res_ce0 = grp_infer_fu_215_res_ce0;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        res_we0 = grp_infer_fu_215_res_we0;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_252_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln10_fu_252_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((grp_infer_fu_215_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln23_fu_278_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln23_fu_278_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln10_fu_252_p2 == 1'd0) & (in_r_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln10_fu_252_p2 == 1'd0) & (in_r_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_block_state22_io));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_block_state22_io));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_io = ((icmp_ln23_reg_325 == 1'd0) & (out_r_TREADY == 1'b0));
end

assign ap_block_state22_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln10_fu_252_p2 == 1'd0) & (in_r_TVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign grp_fu_247_p0 = in_r_TDATA;

assign grp_infer_fu_215_ap_start = grp_infer_fu_215_ap_start_reg;

assign i_1_fu_284_p2 = (i1_0_reg_204 + 4'd1);

assign i_fu_258_p2 = (ap_phi_mux_i_0_phi_fu_196_p4 + 10'd1);

assign icmp_ln10_fu_252_p2 = ((ap_phi_mux_i_0_phi_fu_196_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_278_p2 = ((i1_0_reg_204 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_295_p2 = ((i1_0_reg_204 == 4'd9) ? 1'b1 : 1'b0);

assign out_r_TDATA = res_q0;

assign out_r_TDEST = 1'd0;

assign out_r_TID = 1'd0;

assign out_r_TKEEP = 4'd15;

assign out_r_TLAST = icmp_ln26_reg_339;

assign out_r_TSTRB = 4'd15;

assign out_r_TUSER = 1'd0;

assign zext_ln13_fu_273_p1 = i_0_reg_192_pp0_iter15_reg;

assign zext_ln26_fu_290_p1 = i1_0_reg_204;

endmodule //mnist_lstm
