-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity infer_Bias0_f_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of infer_Bias0_f_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111011111101100101000111", 
    1 => "00111110110010000011110111111111", 
    2 => "00111101100000000011000111000011", 
    3 => "00111110101110101001000011100101", 
    4 => "00111101111011010111100110001110", 
    5 => "00111110100001010000101000101110", 
    6 => "00111110100000110111011110001010", 
    7 => "00111110000010010000101001111111", 
    8 => "00111110010110001111110110010010", 
    9 => "00111110101100000110010111100101", 
    10 => "00111101000100000111001111100110", 
    11 => "00111110110011000001010011110010", 
    12 => "00111110001101010000101010000010", 
    13 => "00111111001001100001000011001001", 
    14 => "10111101001110111111000100111101", 
    15 => "00111110001101001110000100011110", 
    16 => "00111110100101110010000001001101", 
    17 => "00111110110011000110111010110001", 
    18 => "00111110111001101101100111001111", 
    19 => "00111110010110101101110111100110", 
    20 => "00111100110100110100110101000101", 
    21 => "10111101011011010101110010101101", 
    22 => "00111110100010100100101010111000", 
    23 => "00111110000001011001001011111011", 
    24 => "00111110100000010001110001001000", 
    25 => "00111111000010011001110101000010", 
    26 => "00111110000001011001110000000000", 
    27 => "00111110111100110000111110111111", 
    28 => "00111110101010101011101011111000", 
    29 => "00111101000001110111111010101101", 
    30 => "00111110101010100010101001100101", 
    31 => "00111110001111110001110110000010", 
    32 => "00111110101101101000110110010111", 
    33 => "00111110010111110100001100001100", 
    34 => "00111101111101000111100110011111", 
    35 => "00111110100101011011110011010010", 
    36 => "00111110000111111101110100010101", 
    37 => "00111110011000100111011001000110", 
    38 => "00111110110100101011000110000100", 
    39 => "00111101011110001001001011010001", 
    40 => "00111110001100101111101011001001", 
    41 => "00111101000110110010010111101001", 
    42 => "10111100010110000000010101000101", 
    43 => "00111110100100101111001010101100", 
    44 => "00111110101001010000111110111101", 
    45 => "10111100110010011001111011101011", 
    46 => "00111110100111001101111011011001", 
    47 => "10111110001000111111101010101010", 
    48 => "00111110010010001100000000101110", 
    49 => "00111110010111111110000011011011", 
    50 => "00111110100101111100011000000000", 
    51 => "00111110101101000110000101011100", 
    52 => "00111110110110100111010111001010", 
    53 => "00111111000011111011000111010111", 
    54 => "00111101110001001001111110110101", 
    55 => "00111110001011100110001110000100", 
    56 => "00111101000110011000100110101001", 
    57 => "00111110011101011110000011010110", 
    58 => "00111110100101001010110011100010", 
    59 => "00111110101111101000001001011100", 
    60 => "00111111000010011111001011010100", 
    61 => "00111110011100110100100000000100", 
    62 => "10111100010101001100011011110111", 
    63 => "00111110011001000110010111000000", 
    64 => "00111110001100001011100010110101", 
    65 => "00111110100001111100101111111010", 
    66 => "00111101110101000010010001111010", 
    67 => "00111101111110100001101100110100", 
    68 => "00111101110110000111110011011100", 
    69 => "00111110000110101101011101111010", 
    70 => "00111101100110011100101111110101", 
    71 => "00111110000101110110110000000101", 
    72 => "00111101101110011010010000100111", 
    73 => "00111110000010111000101100111010", 
    74 => "00111101101111010111100011110001", 
    75 => "00111110100001010011001100000011", 
    76 => "00111110000110100001010000010011", 
    77 => "00111101110110011100011001000101", 
    78 => "00111110000101000011011111011010", 
    79 => "00111110001010011111000110011010", 
    80 => "00111110100111000100101111001001", 
    81 => "00111110001011001101000001110010", 
    82 => "00111110100110011011101101101011", 
    83 => "00111110010111100101000011010011", 
    84 => "00111110011111011000111111011101", 
    85 => "00111110101010110101011010101011", 
    86 => "00111110100111000010011010010000", 
    87 => "00111110101011100111110101111111", 
    88 => "00111110001000111101011110110010", 
    89 => "00111110100000110000101101111001", 
    90 => "00111110110101000111000111100111", 
    91 => "00111110010100101011100101001110", 
    92 => "00111101110101110010000000101000", 
    93 => "00111101100010111100100011010100", 
    94 => "00111100100000110001101111011111", 
    95 => "00111110001100101000101101100111", 
    96 => "00111110100100010001010100111110", 
    97 => "00111101110000110001110011111000", 
    98 => "00111110010001000100101000000100", 
    99 => "00111101111100001011010011010100", 
    100 => "00111110100100110011010000000000", 
    101 => "00111101110110110010010110001011", 
    102 => "00111110110111001101110101000111", 
    103 => "10111010100000101011100010001000", 
    104 => "00111100111101000010011011101110", 
    105 => "00111101110010101010111001011000", 
    106 => "10111010000010001000001100000000", 
    107 => "00111110010011110011100101101101", 
    108 => "00111101111010010110010011110110", 
    109 => "10111101001101001001000000000101", 
    110 => "00111110110101100010110100111101", 
    111 => "00111101101000000110110000001100", 
    112 => "10111101000011010111100000000110", 
    113 => "00111110111011100110100101101110", 
    114 => "00111110110100111100100010100110", 
    115 => "00111110101011001111010111110010", 
    116 => "00111110100111100110110111010101", 
    117 => "10111100110011011101101101101011", 
    118 => "00111110011001111101111000000111", 
    119 => "00111111000000010100001100111000", 
    120 => "00111110000011100011010110010000", 
    121 => "00111110100111100111000011110111", 
    122 => "00111110101011100100011100110001", 
    123 => "00111110100011101000110100110011", 
    124 => "00111110101011110010110100001101", 
    125 => "00111101111100101111111000111111", 
    126 => "00111110100010011110100011001000", 
    127 => "00111110110110000000110101110011" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity infer_Bias0_f is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of infer_Bias0_f is
    component infer_Bias0_f_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    infer_Bias0_f_rom_U :  component infer_Bias0_f_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


