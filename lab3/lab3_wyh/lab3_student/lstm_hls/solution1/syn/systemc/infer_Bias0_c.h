// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __infer_Bias0_c_H__
#define __infer_Bias0_c_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct infer_Bias0_c_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 128;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(infer_Bias0_c_ram) {
        ram[0] = "0b00111110010111011110100011011100";
        ram[1] = "0b10111101111001100001110101010000";
        ram[2] = "0b00111110011010111010001000010110";
        ram[3] = "0b00111101110010101001010000001111";
        ram[4] = "0b00111110101110011111011110111100";
        ram[5] = "0b00111101111000000111101111001001";
        ram[6] = "0b10111101110011010111010101011100";
        ram[7] = "0b10111101110100110100111111010011";
        ram[8] = "0b10111110011011010011110000100010";
        ram[9] = "0b00111110000011100110111011111001";
        ram[10] = "0b10111101111000011011111100111000";
        ram[11] = "0b10111101011000000001000011011111";
        ram[12] = "0b10111100000110001010011010001000";
        ram[13] = "0b10111110001110001110111001101100";
        ram[14] = "0b10111110011001000011001010000111";
        ram[15] = "0b00111101011000010100001100101100";
        ram[16] = "0b10111101011101011101010111000101";
        ram[17] = "0b10111101010100011011100011111011";
        ram[18] = "0b10111100001001101000001010101011";
        ram[19] = "0b00111101111010000001010010101111";
        ram[20] = "0b00111100000110000010010100000100";
        ram[21] = "0b00111110000110110111101000000001";
        ram[22] = "0b00111100101001011100101000011111";
        ram[23] = "0b10111100110100011111101110110000";
        ram[24] = "0b00111101000101011101100110101001";
        ram[25] = "0b10111101101110110011010011010001";
        ram[26] = "0b10111110111001111001010101000101";
        ram[27] = "0b10111110011010110001110011010111";
        ram[28] = "0b00111101111010111010101100000111";
        ram[29] = "0b10111101011000100010010000001100";
        ram[30] = "0b00111110000010101010011101001011";
        ram[31] = "0b10111101111111111111100111011110";
        ram[32] = "0b00111101101011100011011011001111";
        ram[33] = "0b00111101001010011000011011101010";
        ram[34] = "0b00111101100111010111010111010010";
        ram[35] = "0b10111110001011101001100110101101";
        ram[36] = "0b10111101101100000010010111110101";
        ram[37] = "0b00111101111101110101010110010101";
        ram[38] = "0b00111011111110001101101101101111";
        ram[39] = "0b00111101110100001001110000100010";
        ram[40] = "0b10111101100001010010110111110001";
        ram[41] = "0b00111110000100111001010100000010";
        ram[42] = "0b10111100000110101110001010100111";
        ram[43] = "0b00111101011110111110000010100100";
        ram[44] = "0b00111101101000011110101010001011";
        ram[45] = "0b10111110000100101001101010011011";
        ram[46] = "0b00111110010101110100110010000011";
        ram[47] = "0b00111110011110000111000000101100";
        ram[48] = "0b00111100011000110000000011101100";
        ram[49] = "0b10111110000110000010101110100110";
        ram[50] = "0b00111100001001100111011010001100";
        ram[51] = "0b00111100111110000011111010001011";
        ram[52] = "0b10111101111000010111101100111000";
        ram[53] = "0b00111100110110100001101000100010";
        ram[54] = "0b10111110000100000110110010101111";
        ram[55] = "0b00111100101000000100010010010100";
        ram[56] = "0b00111110010110110001100100101011";
        ram[57] = "0b00111101101001001000111001000010";
        ram[58] = "0b10111101100001001000100110001001";
        ram[59] = "0b10111110000100110101010000100000";
        ram[60] = "0b00111100111010001000111100100000";
        ram[61] = "0b10111110000010111011000111000011";
        ram[62] = "0b10111101110110001010101000011011";
        ram[63] = "0b10111101010011001101001001110110";
        ram[64] = "0b10111101110100110011011011011111";
        ram[65] = "0b10111101101110100110101110100101";
        ram[66] = "0b10111101011010101101110100000110";
        ram[67] = "0b00111011011100101100110010101111";
        ram[68] = "0b10111100001101110001100100000110";
        ram[69] = "0b10111100100100011101001001111011";
        ram[70] = "0b10111101001100110111100010110011";
        ram[71] = "0b00111101101110010000000001010100";
        ram[72] = "0b10111110101001100000000111101000";
        ram[73] = "0b10111101100101110110111100000111";
        ram[74] = "0b00111110101001111111011001000011";
        ram[75] = "0b00111100001110110110111011100001";
        ram[76] = "0b10111110101101000010000011101101";
        ram[77] = "0b10111101010111001000101001010101";
        ram[78] = "0b00111110011011010110111011011011";
        ram[79] = "0b00111101101111001110101000011010";
        ram[80] = "0b00111101011111101011000110011001";
        ram[81] = "0b00111101101111010000100111001000";
        ram[82] = "0b00111101101001001011000101001101";
        ram[83] = "0b00111110000010011101101110110110";
        ram[84] = "0b00111110000001111000001001011011";
        ram[85] = "0b10111101010010111100000000011000";
        ram[86] = "0b00111110010010010101010011111000";
        ram[87] = "0b00111110000000101101111100100001";
        ram[88] = "0b00111110000000100011100110110001";
        ram[89] = "0b00111101010000111000000100011100";
        ram[90] = "0b00111110000100100001111011101101";
        ram[91] = "0b10111101000001111110100001000100";
        ram[92] = "0b00111110000101010010011101011000";
        ram[93] = "0b00111101111011111010001010100000";
        ram[94] = "0b10111110000110000111111010000011";
        ram[95] = "0b00111101000101001100000001111111";
        ram[96] = "0b00111100001001000000110001011001";
        ram[97] = "0b10111110011000001100111100010001";
        ram[98] = "0b00111101100110101111001100111001";
        ram[99] = "0b10111101001111011000100011101010";
        ram[100] = "0b10111101000011001001101010100110";
        ram[101] = "0b00111110011000001100001111100000";
        ram[102] = "0b10111101110011011110101010010111";
        ram[103] = "0b10111011110101001000100000000100";
        ram[104] = "0b10111110010111110010010001000101";
        ram[105] = "0b10111101110011100001000000100001";
        ram[106] = "0b00111101110010101111010111000100";
        ram[107] = "0b00111100001011110111101101100011";
        ram[108] = "0b00111110000011010011101011100111";
        ram[109] = "0b10111110110000111110010110001101";
        ram[110] = "0b00111101000011011000010101000100";
        ram[111] = "0b00111100000010100110111011111100";
        ram[112] = "0b00111110100001111011100110111000";
        ram[113] = "0b10111110001110010011100100110110";
        ram[114] = "0b00111011000110100100000001100010";
        ram[115] = "0b00111101101101000110011011111101";
        ram[116] = "0b00111101001011010001001010110011";
        ram[117] = "0b00111101100010110001111010101101";
        ram[118] = "0b10111110000000101100010000010100";
        ram[119] = "0b10111101100101011100000101001011";
        ram[120] = "0b10111100110001000111101110100101";
        ram[121] = "0b10111101110101000011110111101000";
        ram[122] = "0b10111100110010000000011100111011";
        ram[123] = "0b00111101111000101100011011101111";
        ram[124] = "0b00111101001100001010110010101011";
        ram[125] = "0b00111101100010010011101000010000";
        ram[126] = "0b10111101001000011101001000100010";
        ram[127] = "0b00111101111111010000001110001001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(infer_Bias0_c) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 128;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


infer_Bias0_c_ram* meminst;


SC_CTOR(infer_Bias0_c) {
meminst = new infer_Bias0_c_ram("infer_Bias0_c_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~infer_Bias0_c() {
    delete meminst;
}


};//endmodule
#endif
