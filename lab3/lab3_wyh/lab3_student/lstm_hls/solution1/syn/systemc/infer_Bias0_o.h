// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __infer_Bias0_o_H__
#define __infer_Bias0_o_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct infer_Bias0_o_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 128;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(infer_Bias0_o_ram) {
        ram[0] = "0b00111110111001101100000101110001";
        ram[1] = "0b00111110011011100101101110001100";
        ram[2] = "0b10111101111000100101101000011000";
        ram[3] = "0b00111100000001110010100110010001";
        ram[4] = "0b00111110101001100111101001011001";
        ram[5] = "0b00111110101111000001110101110100";
        ram[6] = "0b00111101001011011011000010000010";
        ram[7] = "0b00111110000010001101100011011111";
        ram[8] = "0b00111110011001101111111001001001";
        ram[9] = "0b10111101110111111100000001011010";
        ram[10] = "0b10111110010111011110101101011001";
        ram[11] = "0b00111100110011010010011111001100";
        ram[12] = "0b00111101010111000011111010101101";
        ram[13] = "0b00111110100100000110100000111010";
        ram[14] = "0b00111101001011000011011010110000";
        ram[15] = "0b10111110000110010100011011101011";
        ram[16] = "0b00111110110100101001101001011000";
        ram[17] = "0b00111100000111011001010111000100";
        ram[18] = "0b00111110100110001100110010011110";
        ram[19] = "0b00111101101100011111110010101101";
        ram[20] = "0b00111111000101100110001011100110";
        ram[21] = "0b10111110110000010011110001100010";
        ram[22] = "0b00111110010111011111010011010111";
        ram[23] = "0b00111101011001100101101010011101";
        ram[24] = "0b10111100110101010000001011010001";
        ram[25] = "0b00111110101111110111111011011011";
        ram[26] = "0b00111110010101100000001011010000";
        ram[27] = "0b00111101011000000010100111111001";
        ram[28] = "0b00111110110110110111010101110101";
        ram[29] = "0b10111101111010110110100111011011";
        ram[30] = "0b00111110101011110100111100010100";
        ram[31] = "0b00111110000101101010100000100101";
        ram[32] = "0b00111100101001001100100010110010";
        ram[33] = "0b00111110100100100001001000001011";
        ram[34] = "0b10111101100110001000010100100010";
        ram[35] = "0b00111101100000100110111100100000";
        ram[36] = "0b00111101001001010000000111001101";
        ram[37] = "0b00111110101111111000111001100011";
        ram[38] = "0b10111101110010000001100100100101";
        ram[39] = "0b00111110100001101111110111010111";
        ram[40] = "0b00111101110001001110110101010101";
        ram[41] = "0b10111110000010101010001111101001";
        ram[42] = "0b00111100100100010011001101100100";
        ram[43] = "0b00111101100101011101100101001000";
        ram[44] = "0b00111011101100001001100011000000";
        ram[45] = "0b10111110010111111111111010111110";
        ram[46] = "0b00111110001111111011011100101101";
        ram[47] = "0b10111101110001010011011111001011";
        ram[48] = "0b00111110100000000000110100111010";
        ram[49] = "0b00111101101100011001001000011010";
        ram[50] = "0b00111110010001100001001100111001";
        ram[51] = "0b00111101111100101011101011100000";
        ram[52] = "0b00111101101100110110100110000100";
        ram[53] = "0b00111101111100111100011000011011";
        ram[54] = "0b00111110101110100111010011111101";
        ram[55] = "0b10111101010001001011100011110111";
        ram[56] = "0b10111100101101110100011101111010";
        ram[57] = "0b10111100011110011000111001100001";
        ram[58] = "0b00111110101110010100110010101001";
        ram[59] = "0b00111100101011000000111011110010";
        ram[60] = "0b00111110100101011101000110110000";
        ram[61] = "0b10111100101111010010001011000000";
        ram[62] = "0b10111100000010010000001100101111";
        ram[63] = "0b10111101101110111111111101110010";
        ram[64] = "0b00111110010011001101010101100110";
        ram[65] = "0b10111101110001011000001011100111";
        ram[66] = "0b00111101111011111000011001010000";
        ram[67] = "0b00111101101101101100010010010111";
        ram[68] = "0b00111100000000111100001100011011";
        ram[69] = "0b10111101011000010001000011010111";
        ram[70] = "0b10111110000101101000010001010110";
        ram[71] = "0b00111100111010101100001101011101";
        ram[72] = "0b00111101111111000100011010001000";
        ram[73] = "0b00111111001001011000010001100011";
        ram[74] = "0b00111110010000011011110100001011";
        ram[75] = "0b10111101100000011101001000011000";
        ram[76] = "0b10111101101000000011111010001001";
        ram[77] = "0b00111100010101010111110111101100";
        ram[78] = "0b00111110011011110110010000100001";
        ram[79] = "0b10111101101000110110000100000111";
        ram[80] = "0b10111101111000001111110001110010";
        ram[81] = "0b00111101111011111101011000110111";
        ram[82] = "0b10111101110000011010000001001000";
        ram[83] = "0b00111100100101110101101011000000";
        ram[84] = "0b00111111001001011011110010001010";
        ram[85] = "0b00111101100111111000001011101001";
        ram[86] = "0b00111100110100000001001110111111";
        ram[87] = "0b00111110000010011010010100001110";
        ram[88] = "0b10111101101100101111101010000100";
        ram[89] = "0b10111100100101111111100111100010";
        ram[90] = "0b10111101101101000101000001111010";
        ram[91] = "0b00111101101000100100000101111111";
        ram[92] = "0b00111110010101100000001101010110";
        ram[93] = "0b00111110010001110011001101011111";
        ram[94] = "0b10111110001001001000100011110101";
        ram[95] = "0b00111110101011001010110001100110";
        ram[96] = "0b00111110100000100000011000100001";
        ram[97] = "0b10111110011110111011010101101111";
        ram[98] = "0b00111110001100110000001001101010";
        ram[99] = "0b00111101011111110001100110001110";
        ram[100] = "0b10111011000110101110000101100000";
        ram[101] = "0b00111101010100010110001110001000";
        ram[102] = "0b00111101101100010000000000110001";
        ram[103] = "0b00111100011110011000010001000110";
        ram[104] = "0b00111110011101111010111100001101";
        ram[105] = "0b00111100110110010001000111010101";
        ram[106] = "0b00111110001010110001010110111100";
        ram[107] = "0b00111101100000001001100101111010";
        ram[108] = "0b00111110001110101100110010111010";
        ram[109] = "0b00111101001001000010011110001101";
        ram[110] = "0b00111101111011000000000010100100";
        ram[111] = "0b00111110011100100011000010011111";
        ram[112] = "0b00111101111001010000011111011100";
        ram[113] = "0b00111101001000010101010001100001";
        ram[114] = "0b00111110100011111010100100100111";
        ram[115] = "0b00111110000000110000111000000111";
        ram[116] = "0b00111110011000000010010000011001";
        ram[117] = "0b10111110010000010011001111110111";
        ram[118] = "0b00111110001011000011011011100001";
        ram[119] = "0b10111101011111001111100001101100";
        ram[120] = "0b00111110011010101010010111100001";
        ram[121] = "0b00111110001101101000101000010100";
        ram[122] = "0b10111100100111110011111000001110";
        ram[123] = "0b00111101101010011101110110010110";
        ram[124] = "0b10111100101011000100001111010110";
        ram[125] = "0b00111101110111100010000110110001";
        ram[126] = "0b00111011111011100010110101100001";
        ram[127] = "0b00111110100111111100000010010000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(infer_Bias0_o) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 128;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


infer_Bias0_o_ram* meminst;


SC_CTOR(infer_Bias0_o) {
meminst = new infer_Bias0_o_ram("infer_Bias0_o_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~infer_Bias0_o() {
    delete meminst;
}


};//endmodule
#endif
