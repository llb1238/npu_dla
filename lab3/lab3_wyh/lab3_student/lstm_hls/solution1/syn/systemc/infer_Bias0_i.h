// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __infer_Bias0_i_H__
#define __infer_Bias0_i_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct infer_Bias0_i_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 128;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(infer_Bias0_i_ram) {
        ram[0] = "0b00111101100101101011010011101111";
        ram[1] = "0b00111100110100101101100000101111";
        ram[2] = "0b10111110001101110001100101010111";
        ram[3] = "0b10111110000010011110111010001001";
        ram[4] = "0b00111110110100000110110000010101";
        ram[5] = "0b10111101101011000101100011011100";
        ram[6] = "0b10111101100010110100011011111111";
        ram[7] = "0b10111101000001100000110010100010";
        ram[8] = "0b10111101011101010101101001011000";
        ram[9] = "0b10111110100011000011110000000001";
        ram[10] = "0b10111110111111110111011101111010";
        ram[11] = "0b10111001000101000001000010000010";
        ram[12] = "0b00111110101100010101011001011001";
        ram[13] = "0b00111110010110100111011101111011";
        ram[14] = "0b10111110101011100111000001100000";
        ram[15] = "0b10111110100101111110110100000101";
        ram[16] = "0b00111101111101001010101101101110";
        ram[17] = "0b10111101111010110001011000000110";
        ram[18] = "0b00111100001100010000001101000011";
        ram[19] = "0b10111101100000100011110111101100";
        ram[20] = "0b00111110001110110110110010001000";
        ram[21] = "0b10111110110101101100110101111101";
        ram[22] = "0b10111110000100001111110000101111";
        ram[23] = "0b00111100101101000101001000010010";
        ram[24] = "0b00111100100111011011001011001001";
        ram[25] = "0b10111110000110111011100010110110";
        ram[26] = "0b00111101111101011100101001111010";
        ram[27] = "0b00111110001110111110000110000000";
        ram[28] = "0b10111101100110101010001110110010";
        ram[29] = "0b10111110101001100111001101000101";
        ram[30] = "0b00111100110010110110000111110011";
        ram[31] = "0b10111101111111010100110010010010";
        ram[32] = "0b00111101110000001000111001111110";
        ram[33] = "0b00111110011100001101001011001010";
        ram[34] = "0b00111110010010111010110101110111";
        ram[35] = "0b00111110010001001110110111110110";
        ram[36] = "0b00111101111001011111101100111100";
        ram[37] = "0b00111101001101010000111011101110";
        ram[38] = "0b10111101100110111100011010100000";
        ram[39] = "0b00111101101010100100011101000111";
        ram[40] = "0b00111110011100101111010001010110";
        ram[41] = "0b00111110100111000101001001000011";
        ram[42] = "0b00111110101111000010001000111001";
        ram[43] = "0b00111110110111100010101001101001";
        ram[44] = "0b00111110110111010101000000000100";
        ram[45] = "0b00111110010101100001110000011100";
        ram[46] = "0b10111100111010011111101011100000";
        ram[47] = "0b10111100000011100101010111010010";
        ram[48] = "0b10111110000111101001011111011110";
        ram[49] = "0b10111101001100110101100001011010";
        ram[50] = "0b10111101101001011010000100101011";
        ram[51] = "0b10111110100100011110000001110010";
        ram[52] = "0b10111101111000100100001011000011";
        ram[53] = "0b10111110001001110100000001010010";
        ram[54] = "0b10111101111100000111001111011110";
        ram[55] = "0b10111110001110011100110010100100";
        ram[56] = "0b10111110100001010100110111100101";
        ram[57] = "0b10111101001101001100111001110001";
        ram[58] = "0b10111110000100111110001010001100";
        ram[59] = "0b10111110001110101100001111111001";
        ram[60] = "0b10111101101000001111001000011011";
        ram[61] = "0b00111110100000111011001011010011";
        ram[62] = "0b00111110001111110101101010010110";
        ram[63] = "0b00111100110001100000101100110010";
        ram[64] = "0b10111110000011100001001100011110";
        ram[65] = "0b00111101100100001100011101110010";
        ram[66] = "0b00111101100010110011110010111010";
        ram[67] = "0b10111011101110101011110000110110";
        ram[68] = "0b00111110001101101110111100010101";
        ram[69] = "0b10111101001101011111101010010110";
        ram[70] = "0b10111110000011010101000010010100";
        ram[71] = "0b00111101101100010011100001010010";
        ram[72] = "0b10111101010111110000000111010001";
        ram[73] = "0b00111110000000000110000101110111";
        ram[74] = "0b10111101101101010000011110100001";
        ram[75] = "0b10111101011011001110010110100100";
        ram[76] = "0b10111101001101011100110110001101";
        ram[77] = "0b00111110001010000100010001011110";
        ram[78] = "0b00111100101010100101100010010100";
        ram[79] = "0b10111101111101110111100010101000";
        ram[80] = "0b00111101000010000010110001110111";
        ram[81] = "0b00111100111101010101010011111100";
        ram[82] = "0b00111101100101001010100011000000";
        ram[83] = "0b10111101110101000001111010110110";
        ram[84] = "0b00111100110100100111110111110111";
        ram[85] = "0b10111101111000111001000110111011";
        ram[86] = "0b00111101110001001101110100111000";
        ram[87] = "0b00111011101111101100101101000100";
        ram[88] = "0b10111101010011010010111111010111";
        ram[89] = "0b00111101110110111011101101010101";
        ram[90] = "0b10111110110000001110100011011001";
        ram[91] = "0b10111101110001100011101100000001";
        ram[92] = "0b00111100100111110011001110000111";
        ram[93] = "0b10111101100010101000001001000111";
        ram[94] = "0b00111011111111001110000100100101";
        ram[95] = "0b10111101110101111111110111111011";
        ram[96] = "0b00111110000101101111000110110100";
        ram[97] = "0b10111101100010000010011000001011";
        ram[98] = "0b00111101101111100000110010001001";
        ram[99] = "0b10111110101000101111100111011000";
        ram[100] = "0b00111011101011001100111011111100";
        ram[101] = "0b10111110000100100110111101101000";
        ram[102] = "0b10111101111001101111010000101011";
        ram[103] = "0b00111100111011011101100111101000";
        ram[104] = "0b00111101001001110111000010110010";
        ram[105] = "0b00111100100010011010000010011000";
        ram[106] = "0b10111110010100011100111101111000";
        ram[107] = "0b10111101100011001101001010111001";
        ram[108] = "0b00111100100010101111010011111100";
        ram[109] = "0b00111101000011101000001101111110";
        ram[110] = "0b00111101000100011010111000011110";
        ram[111] = "0b10111101010010010001010001011001";
        ram[112] = "0b10111100101111011110011100010110";
        ram[113] = "0b10111110001100101011010000001001";
        ram[114] = "0b10111101000111101111100000110000";
        ram[115] = "0b00111101110110110011100100110100";
        ram[116] = "0b00111101001111111100000110101100";
        ram[117] = "0b00111101100100101100010110110010";
        ram[118] = "0b10111101011111100110111101100010";
        ram[119] = "0b00111101001100110111101100010100";
        ram[120] = "0b10111101011001001100101110001001";
        ram[121] = "0b10111101110001100111010101011001";
        ram[122] = "0b10111110000000111101011010100110";
        ram[123] = "0b10111101011100100000110001000100";
        ram[124] = "0b10111101110101001001100011000100";
        ram[125] = "0b10111101001010100001001001010000";
        ram[126] = "0b10111100111010010011010001011100";
        ram[127] = "0b00111101001001011010111011001001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(infer_Bias0_i) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 128;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


infer_Bias0_i_ram* meminst;


SC_CTOR(infer_Bias0_i) {
meminst = new infer_Bias0_i_ram("infer_Bias0_i_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~infer_Bias0_i() {
    delete meminst;
}


};//endmodule
#endif
