// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "geva_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic geva_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic geva_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> geva_1::ap_ST_fsm_state1 = "1";
const sc_lv<9> geva_1::ap_ST_fsm_state2 = "10";
const sc_lv<9> geva_1::ap_ST_fsm_state3 = "100";
const sc_lv<9> geva_1::ap_ST_fsm_state4 = "1000";
const sc_lv<9> geva_1::ap_ST_fsm_state5 = "10000";
const sc_lv<9> geva_1::ap_ST_fsm_state6 = "100000";
const sc_lv<9> geva_1::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> geva_1::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> geva_1::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> geva_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> geva_1::ap_const_lv32_1 = "1";
const sc_lv<1> geva_1::ap_const_lv1_0 = "0";
const sc_lv<32> geva_1::ap_const_lv32_2 = "10";
const sc_lv<32> geva_1::ap_const_lv32_7 = "111";
const sc_lv<8> geva_1::ap_const_lv8_0 = "00000000";
const sc_lv<32> geva_1::ap_const_lv32_8 = "1000";
const sc_lv<32> geva_1::ap_const_lv32_3 = "11";
const sc_lv<8> geva_1::ap_const_lv8_80 = "10000000";
const sc_lv<8> geva_1::ap_const_lv8_1 = "1";
const sc_lv<1> geva_1::ap_const_lv1_1 = "1";
const bool geva_1::ap_const_boolean_1 = true;

geva_1::geva_1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    LSTM_Top_fadd_32nbkb_U2 = new LSTM_Top_fadd_32nbkb<1,5,32,32,32>("LSTM_Top_fadd_32nbkb_U2");
    LSTM_Top_fadd_32nbkb_U2->clk(ap_clk);
    LSTM_Top_fadd_32nbkb_U2->reset(ap_rst);
    LSTM_Top_fadd_32nbkb_U2->din0(res_load_reg_98);
    LSTM_Top_fadd_32nbkb_U2->din1(a_load_reg_93);
    LSTM_Top_fadd_32nbkb_U2->ce(ap_var_for_const0);
    LSTM_Top_fadd_32nbkb_U2->dout(grp_fu_53_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln45_fu_69_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln43_fu_57_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln43_fu_57_p2 );

    SC_METHOD(thread_i_fu_63_p2);
    sensitive << ( i_0_reg_42 );

    SC_METHOD(thread_icmp_ln43_fu_57_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_42 );

    SC_METHOD(thread_res_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( res_addr_reg_88 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( zext_ln45_fu_69_p1 );

    SC_METHOD(thread_res_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_res_d0);
    sensitive << ( tmp_reg_103 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_res_we0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_zext_ln45_fu_69_p1);
    sensitive << ( i_0_reg_42 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln43_fu_57_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "geva_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, res_address0, "(port)res_address0");
    sc_trace(mVcdFile, res_ce0, "(port)res_ce0");
    sc_trace(mVcdFile, res_we0, "(port)res_we0");
    sc_trace(mVcdFile, res_d0, "(port)res_d0");
    sc_trace(mVcdFile, res_q0, "(port)res_q0");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_63_p2, "i_fu_63_p2");
    sc_trace(mVcdFile, i_reg_78, "i_reg_78");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln43_fu_57_p2, "icmp_ln43_fu_57_p2");
    sc_trace(mVcdFile, res_addr_reg_88, "res_addr_reg_88");
    sc_trace(mVcdFile, a_load_reg_93, "a_load_reg_93");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, res_load_reg_98, "res_load_reg_98");
    sc_trace(mVcdFile, grp_fu_53_p2, "grp_fu_53_p2");
    sc_trace(mVcdFile, tmp_reg_103, "tmp_reg_103");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_0_reg_42, "i_0_reg_42");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, zext_ln45_fu_69_p1, "zext_ln45_fu_69_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

geva_1::~geva_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete LSTM_Top_fadd_32nbkb_U2;
}

void geva_1::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void geva_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_0_reg_42 = i_reg_78.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_42 = ap_const_lv8_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_load_reg_93 = a_q0.read();
        res_load_reg_98 = res_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_78 = i_fu_63_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln43_fu_57_p2.read(), ap_const_lv1_0))) {
        res_addr_reg_88 =  (sc_lv<7>) (zext_ln45_fu_69_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_reg_103 = grp_fu_53_p2.read();
    }
}

void geva_1::thread_a_address0() {
    a_address0 =  (sc_lv<7>) (zext_ln45_fu_69_p1.read());
}

void geva_1::thread_a_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void geva_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void geva_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void geva_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void geva_1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void geva_1::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void geva_1::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void geva_1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln43_fu_57_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void geva_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void geva_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln43_fu_57_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void geva_1::thread_i_fu_63_p2() {
    i_fu_63_p2 = (!i_0_reg_42.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_0_reg_42.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void geva_1::thread_icmp_ln43_fu_57_p2() {
    icmp_ln43_fu_57_p2 = (!i_0_reg_42.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_42.read() == ap_const_lv8_80);
}

void geva_1::thread_res_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        res_address0 = res_addr_reg_88.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        res_address0 =  (sc_lv<7>) (zext_ln45_fu_69_p1.read());
    } else {
        res_address0 = "XXXXXXX";
    }
}

void geva_1::thread_res_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        res_ce0 = ap_const_logic_1;
    } else {
        res_ce0 = ap_const_logic_0;
    }
}

void geva_1::thread_res_d0() {
    res_d0 = tmp_reg_103.read();
}

void geva_1::thread_res_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        res_we0 = ap_const_logic_1;
    } else {
        res_we0 = ap_const_logic_0;
    }
}

void geva_1::thread_zext_ln45_fu_69_p1() {
    zext_ln45_fu_69_p1 = esl_zext<64,8>(i_0_reg_42.read());
}

void geva_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln43_fu_57_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

}

