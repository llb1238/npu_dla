// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sigmoid.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sigmoid::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sigmoid::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<60> sigmoid::ap_ST_fsm_state1 = "1";
const sc_lv<60> sigmoid::ap_ST_fsm_state2 = "10";
const sc_lv<60> sigmoid::ap_ST_fsm_state3 = "100";
const sc_lv<60> sigmoid::ap_ST_fsm_state4 = "1000";
const sc_lv<60> sigmoid::ap_ST_fsm_state5 = "10000";
const sc_lv<60> sigmoid::ap_ST_fsm_state6 = "100000";
const sc_lv<60> sigmoid::ap_ST_fsm_state7 = "1000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state8 = "10000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state9 = "100000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state10 = "1000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state11 = "10000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state12 = "100000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<60> sigmoid::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> sigmoid::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sigmoid::ap_const_lv32_1 = "1";
const sc_lv<1> sigmoid::ap_const_lv1_0 = "0";
const sc_lv<32> sigmoid::ap_const_lv32_2 = "10";
const sc_lv<32> sigmoid::ap_const_lv32_3 = "11";
const sc_lv<32> sigmoid::ap_const_lv32_15 = "10101";
const sc_lv<32> sigmoid::ap_const_lv32_1A = "11010";
const sc_lv<32> sigmoid::ap_const_lv32_39 = "111001";
const sc_lv<8> sigmoid::ap_const_lv8_0 = "00000000";
const sc_lv<32> sigmoid::ap_const_lv32_3B = "111011";
const sc_lv<32> sigmoid::ap_const_lv32_3A = "111010";
const sc_lv<64> sigmoid::ap_const_lv64_3FF0000000000000 = "11111111110000000000000000000000000000000000000000000000000000";
const sc_lv<32> sigmoid::ap_const_lv32_16 = "10110";
const sc_lv<32> sigmoid::ap_const_lv32_1B = "11011";
const sc_lv<32> sigmoid::ap_const_lv32_4 = "100";
const sc_lv<8> sigmoid::ap_const_lv8_80 = "10000000";
const sc_lv<8> sigmoid::ap_const_lv8_1 = "1";
const sc_lv<32> sigmoid::ap_const_lv32_80000000 = "10000000000000000000000000000000";
const sc_lv<1> sigmoid::ap_const_lv1_1 = "1";
const sc_lv<64> sigmoid::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const bool sigmoid::ap_const_boolean_1 = true;

sigmoid::sigmoid(sc_module_name name) : sc_module(name), mVcdFile(0) {
    LSTM_Top_fptrunc_cud_U6 = new LSTM_Top_fptrunc_cud<1,2,64,32>("LSTM_Top_fptrunc_cud_U6");
    LSTM_Top_fptrunc_cud_U6->clk(ap_clk);
    LSTM_Top_fptrunc_cud_U6->reset(ap_rst);
    LSTM_Top_fptrunc_cud_U6->din0(tmp_4_reg_151);
    LSTM_Top_fptrunc_cud_U6->ce(ap_var_for_const0);
    LSTM_Top_fptrunc_cud_U6->dout(grp_fu_59_p1);
    LSTM_Top_fpext_32dEe_U7 = new LSTM_Top_fpext_32dEe<1,2,32,64>("LSTM_Top_fpext_32dEe_U7");
    LSTM_Top_fpext_32dEe_U7->clk(ap_clk);
    LSTM_Top_fpext_32dEe_U7->reset(ap_rst);
    LSTM_Top_fpext_32dEe_U7->din0(grp_fu_63_p0);
    LSTM_Top_fpext_32dEe_U7->ce(ap_var_for_const0);
    LSTM_Top_fpext_32dEe_U7->dout(grp_fu_63_p1);
    LSTM_Top_dadd_64neOg_U8 = new LSTM_Top_dadd_64neOg<1,5,64,64,64>("LSTM_Top_dadd_64neOg_U8");
    LSTM_Top_dadd_64neOg_U8->clk(ap_clk);
    LSTM_Top_dadd_64neOg_U8->reset(ap_rst);
    LSTM_Top_dadd_64neOg_U8->din0(tmp_2_reg_141);
    LSTM_Top_dadd_64neOg_U8->din1(ap_var_for_const1);
    LSTM_Top_dadd_64neOg_U8->ce(ap_var_for_const0);
    LSTM_Top_dadd_64neOg_U8->dout(grp_fu_66_p2);
    LSTM_Top_ddiv_64nfYi_U9 = new LSTM_Top_ddiv_64nfYi<1,31,64,64,64>("LSTM_Top_ddiv_64nfYi_U9");
    LSTM_Top_ddiv_64nfYi_U9->clk(ap_clk);
    LSTM_Top_ddiv_64nfYi_U9->reset(ap_rst);
    LSTM_Top_ddiv_64nfYi_U9->din0(ap_var_for_const1);
    LSTM_Top_ddiv_64nfYi_U9->din1(tmp_3_reg_146);
    LSTM_Top_ddiv_64nfYi_U9->ce(ap_var_for_const0);
    LSTM_Top_ddiv_64nfYi_U9->dout(grp_fu_71_p2);
    LSTM_Top_dexp_64ng8j_U10 = new LSTM_Top_dexp_64ng8j<1,18,64,64,64>("LSTM_Top_dexp_64ng8j_U10");
    LSTM_Top_dexp_64ng8j_U10->clk(ap_clk);
    LSTM_Top_dexp_64ng8j_U10->reset(ap_rst);
    LSTM_Top_dexp_64ng8j_U10->din0(ap_var_for_const2);
    LSTM_Top_dexp_64ng8j_U10->din1(tmp_1_reg_136);
    LSTM_Top_dexp_64ng8j_U10->ce(ap_var_for_const0);
    LSTM_Top_dexp_64ng8j_U10->dout(grp_fu_76_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln23_fu_93_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state59);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state60);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln21_fu_81_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln21_fu_81_p2 );

    SC_METHOD(thread_bitcast_ln23_fu_98_p1);
    sensitive << ( a_q0 );

    SC_METHOD(thread_grp_fu_63_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( xor_ln23_fu_102_p2 );

    SC_METHOD(thread_i_fu_87_p2);
    sensitive << ( i_0_reg_48 );

    SC_METHOD(thread_icmp_ln21_fu_81_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_48 );

    SC_METHOD(thread_res_address0);
    sensitive << ( zext_ln23_reg_121 );
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_res_ce0);
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_res_d0);
    sensitive << ( ap_CS_fsm_state60 );
    sensitive << ( grp_fu_59_p1 );

    SC_METHOD(thread_res_we0);
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_xor_ln23_fu_102_p2);
    sensitive << ( bitcast_ln23_fu_98_p1 );

    SC_METHOD(thread_zext_ln23_fu_93_p1);
    sensitive << ( i_0_reg_48 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln21_fu_81_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "000000000000000000000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sigmoid_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, res_address0, "(port)res_address0");
    sc_trace(mVcdFile, res_ce0, "(port)res_ce0");
    sc_trace(mVcdFile, res_we0, "(port)res_we0");
    sc_trace(mVcdFile, res_d0, "(port)res_d0");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_87_p2, "i_fu_87_p2");
    sc_trace(mVcdFile, i_reg_116, "i_reg_116");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln23_fu_93_p1, "zext_ln23_fu_93_p1");
    sc_trace(mVcdFile, zext_ln23_reg_121, "zext_ln23_reg_121");
    sc_trace(mVcdFile, icmp_ln21_fu_81_p2, "icmp_ln21_fu_81_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_63_p1, "grp_fu_63_p1");
    sc_trace(mVcdFile, tmp_1_reg_136, "tmp_1_reg_136");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_76_p2, "grp_fu_76_p2");
    sc_trace(mVcdFile, tmp_2_reg_141, "tmp_2_reg_141");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_fu_66_p2, "grp_fu_66_p2");
    sc_trace(mVcdFile, tmp_3_reg_146, "tmp_3_reg_146");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, grp_fu_71_p2, "grp_fu_71_p2");
    sc_trace(mVcdFile, tmp_4_reg_151, "tmp_4_reg_151");
    sc_trace(mVcdFile, ap_CS_fsm_state58, "ap_CS_fsm_state58");
    sc_trace(mVcdFile, i_0_reg_48, "i_0_reg_48");
    sc_trace(mVcdFile, ap_CS_fsm_state60, "ap_CS_fsm_state60");
    sc_trace(mVcdFile, grp_fu_59_p1, "grp_fu_59_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state59, "ap_CS_fsm_state59");
    sc_trace(mVcdFile, grp_fu_63_p0, "grp_fu_63_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, bitcast_ln23_fu_98_p1, "bitcast_ln23_fu_98_p1");
    sc_trace(mVcdFile, xor_ln23_fu_102_p2, "xor_ln23_fu_102_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

sigmoid::~sigmoid() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete LSTM_Top_fptrunc_cud_U6;
    delete LSTM_Top_fpext_32dEe_U7;
    delete LSTM_Top_dadd_64neOg_U8;
    delete LSTM_Top_ddiv_64nfYi_U9;
    delete LSTM_Top_dexp_64ng8j_U10;
}

void sigmoid::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sigmoid::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_3FF0000000000000;
}

void sigmoid::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv64_0;
}

void sigmoid::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read())) {
        i_0_reg_48 = i_reg_116.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_48 = ap_const_lv8_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_116 = i_fu_87_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_1_reg_136 = grp_fu_63_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        tmp_2_reg_141 = grp_fu_76_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        tmp_3_reg_146 = grp_fu_66_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) {
        tmp_4_reg_151 = grp_fu_71_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln21_fu_81_p2.read(), ap_const_lv1_0))) {
        zext_ln23_reg_121 = zext_ln23_fu_93_p1.read();
    }
}

void sigmoid::thread_a_address0() {
    a_address0 =  (sc_lv<7>) (zext_ln23_fu_93_p1.read());
}

void sigmoid::thread_a_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sigmoid::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sigmoid::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void sigmoid::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void sigmoid::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void sigmoid::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void sigmoid::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sigmoid::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sigmoid::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sigmoid::thread_ap_CS_fsm_state58() {
    ap_CS_fsm_state58 = ap_CS_fsm.read()[57];
}

void sigmoid::thread_ap_CS_fsm_state59() {
    ap_CS_fsm_state59 = ap_CS_fsm.read()[58];
}

void sigmoid::thread_ap_CS_fsm_state60() {
    ap_CS_fsm_state60 = ap_CS_fsm.read()[59];
}

void sigmoid::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln21_fu_81_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sigmoid::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln21_fu_81_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sigmoid::thread_bitcast_ln23_fu_98_p1() {
    bitcast_ln23_fu_98_p1 = a_q0.read();
}

void sigmoid::thread_grp_fu_63_p0() {
    grp_fu_63_p0 = xor_ln23_fu_102_p2.read();
}

void sigmoid::thread_i_fu_87_p2() {
    i_fu_87_p2 = (!i_0_reg_48.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_0_reg_48.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void sigmoid::thread_icmp_ln21_fu_81_p2() {
    icmp_ln21_fu_81_p2 = (!i_0_reg_48.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_48.read() == ap_const_lv8_80);
}

void sigmoid::thread_res_address0() {
    res_address0 =  (sc_lv<7>) (zext_ln23_reg_121.read());
}

void sigmoid::thread_res_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read())) {
        res_ce0 = ap_const_logic_1;
    } else {
        res_ce0 = ap_const_logic_0;
    }
}

void sigmoid::thread_res_d0() {
    res_d0 = grp_fu_59_p1.read();
}

void sigmoid::thread_res_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read())) {
        res_we0 = ap_const_logic_1;
    } else {
        res_we0 = ap_const_logic_0;
    }
}

void sigmoid::thread_xor_ln23_fu_102_p2() {
    xor_ln23_fu_102_p2 = (bitcast_ln23_fu_98_p1.read() ^ ap_const_lv32_80000000);
}

void sigmoid::thread_zext_ln23_fu_93_p1() {
    zext_ln23_fu_93_p1 = esl_zext<64,8>(i_0_reg_48.read());
}

void sigmoid::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln21_fu_81_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            ap_NS_fsm = ap_ST_fsm_state54;
            break;
        case 9007199254740992 : 
            ap_NS_fsm = ap_ST_fsm_state55;
            break;
        case 18014398509481984 : 
            ap_NS_fsm = ap_ST_fsm_state56;
            break;
        case 36028797018963968 : 
            ap_NS_fsm = ap_ST_fsm_state57;
            break;
        case 72057594037927936 : 
            ap_NS_fsm = ap_ST_fsm_state58;
            break;
        case 144115188075855872 : 
            ap_NS_fsm = ap_ST_fsm_state59;
            break;
        case 288230376151711744 : 
            ap_NS_fsm = ap_ST_fsm_state60;
            break;
        case 576460752303423488 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

