// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fill_n_HH_
#define _fill_n_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct fill_n : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > p_first_address0;
    sc_out< sc_logic > p_first_ce0;
    sc_out< sc_logic > p_first_we0;
    sc_out< sc_lv<32> > p_first_d0;


    // Module declarations
    fill_n(sc_module_name name);
    SC_HAS_PROCESS(fill_n);

    ~fill_n();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > add_ln762_fu_52_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > p_0_rec_i_reg_30;
    sc_signal< sc_lv<1> > icmp_ln762_fu_46_p2;
    sc_signal< sc_lv<64> > p_0_rec_i_cast_fu_41_p1;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln762_fu_52_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_icmp_ln762_fu_46_p2();
    void thread_p_0_rec_i_cast_fu_41_p1();
    void thread_p_first_address0();
    void thread_p_first_ce0();
    void thread_p_first_d0();
    void thread_p_first_we0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
