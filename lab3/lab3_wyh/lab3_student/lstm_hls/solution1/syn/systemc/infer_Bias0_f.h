// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __infer_Bias0_f_H__
#define __infer_Bias0_f_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct infer_Bias0_f_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 128;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(infer_Bias0_f_ram) {
        ram[0] = "0b10111100111011111101100101000111";
        ram[1] = "0b00111110110010000011110111111111";
        ram[2] = "0b00111101100000000011000111000011";
        ram[3] = "0b00111110101110101001000011100101";
        ram[4] = "0b00111101111011010111100110001110";
        ram[5] = "0b00111110100001010000101000101110";
        ram[6] = "0b00111110100000110111011110001010";
        ram[7] = "0b00111110000010010000101001111111";
        ram[8] = "0b00111110010110001111110110010010";
        ram[9] = "0b00111110101100000110010111100101";
        ram[10] = "0b00111101000100000111001111100110";
        ram[11] = "0b00111110110011000001010011110010";
        ram[12] = "0b00111110001101010000101010000010";
        ram[13] = "0b00111111001001100001000011001001";
        ram[14] = "0b10111101001110111111000100111101";
        ram[15] = "0b00111110001101001110000100011110";
        ram[16] = "0b00111110100101110010000001001101";
        ram[17] = "0b00111110110011000110111010110001";
        ram[18] = "0b00111110111001101101100111001111";
        ram[19] = "0b00111110010110101101110111100110";
        ram[20] = "0b00111100110100110100110101000101";
        ram[21] = "0b10111101011011010101110010101101";
        ram[22] = "0b00111110100010100100101010111000";
        ram[23] = "0b00111110000001011001001011111011";
        ram[24] = "0b00111110100000010001110001001000";
        ram[25] = "0b00111111000010011001110101000010";
        ram[26] = "0b00111110000001011001110000000000";
        ram[27] = "0b00111110111100110000111110111111";
        ram[28] = "0b00111110101010101011101011111000";
        ram[29] = "0b00111101000001110111111010101101";
        ram[30] = "0b00111110101010100010101001100101";
        ram[31] = "0b00111110001111110001110110000010";
        ram[32] = "0b00111110101101101000110110010111";
        ram[33] = "0b00111110010111110100001100001100";
        ram[34] = "0b00111101111101000111100110011111";
        ram[35] = "0b00111110100101011011110011010010";
        ram[36] = "0b00111110000111111101110100010101";
        ram[37] = "0b00111110011000100111011001000110";
        ram[38] = "0b00111110110100101011000110000100";
        ram[39] = "0b00111101011110001001001011010001";
        ram[40] = "0b00111110001100101111101011001001";
        ram[41] = "0b00111101000110110010010111101001";
        ram[42] = "0b10111100010110000000010101000101";
        ram[43] = "0b00111110100100101111001010101100";
        ram[44] = "0b00111110101001010000111110111101";
        ram[45] = "0b10111100110010011001111011101011";
        ram[46] = "0b00111110100111001101111011011001";
        ram[47] = "0b10111110001000111111101010101010";
        ram[48] = "0b00111110010010001100000000101110";
        ram[49] = "0b00111110010111111110000011011011";
        ram[50] = "0b00111110100101111100011000000000";
        ram[51] = "0b00111110101101000110000101011100";
        ram[52] = "0b00111110110110100111010111001010";
        ram[53] = "0b00111111000011111011000111010111";
        ram[54] = "0b00111101110001001001111110110101";
        ram[55] = "0b00111110001011100110001110000100";
        ram[56] = "0b00111101000110011000100110101001";
        ram[57] = "0b00111110011101011110000011010110";
        ram[58] = "0b00111110100101001010110011100010";
        ram[59] = "0b00111110101111101000001001011100";
        ram[60] = "0b00111111000010011111001011010100";
        ram[61] = "0b00111110011100110100100000000100";
        ram[62] = "0b10111100010101001100011011110111";
        ram[63] = "0b00111110011001000110010111000000";
        ram[64] = "0b00111110001100001011100010110101";
        ram[65] = "0b00111110100001111100101111111010";
        ram[66] = "0b00111101110101000010010001111010";
        ram[67] = "0b00111101111110100001101100110100";
        ram[68] = "0b00111101110110000111110011011100";
        ram[69] = "0b00111110000110101101011101111010";
        ram[70] = "0b00111101100110011100101111110101";
        ram[71] = "0b00111110000101110110110000000101";
        ram[72] = "0b00111101101110011010010000100111";
        ram[73] = "0b00111110000010111000101100111010";
        ram[74] = "0b00111101101111010111100011110001";
        ram[75] = "0b00111110100001010011001100000011";
        ram[76] = "0b00111110000110100001010000010011";
        ram[77] = "0b00111101110110011100011001000101";
        ram[78] = "0b00111110000101000011011111011010";
        ram[79] = "0b00111110001010011111000110011010";
        ram[80] = "0b00111110100111000100101111001001";
        ram[81] = "0b00111110001011001101000001110010";
        ram[82] = "0b00111110100110011011101101101011";
        ram[83] = "0b00111110010111100101000011010011";
        ram[84] = "0b00111110011111011000111111011101";
        ram[85] = "0b00111110101010110101011010101011";
        ram[86] = "0b00111110100111000010011010010000";
        ram[87] = "0b00111110101011100111110101111111";
        ram[88] = "0b00111110001000111101011110110010";
        ram[89] = "0b00111110100000110000101101111001";
        ram[90] = "0b00111110110101000111000111100111";
        ram[91] = "0b00111110010100101011100101001110";
        ram[92] = "0b00111101110101110010000000101000";
        ram[93] = "0b00111101100010111100100011010100";
        ram[94] = "0b00111100100000110001101111011111";
        ram[95] = "0b00111110001100101000101101100111";
        ram[96] = "0b00111110100100010001010100111110";
        ram[97] = "0b00111101110000110001110011111000";
        ram[98] = "0b00111110010001000100101000000100";
        ram[99] = "0b00111101111100001011010011010100";
        ram[100] = "0b00111110100100110011010000000000";
        ram[101] = "0b00111101110110110010010110001011";
        ram[102] = "0b00111110110111001101110101000111";
        ram[103] = "0b10111010100000101011100010001000";
        ram[104] = "0b00111100111101000010011011101110";
        ram[105] = "0b00111101110010101010111001011000";
        ram[106] = "0b10111010000010001000001100000000";
        ram[107] = "0b00111110010011110011100101101101";
        ram[108] = "0b00111101111010010110010011110110";
        ram[109] = "0b10111101001101001001000000000101";
        ram[110] = "0b00111110110101100010110100111101";
        ram[111] = "0b00111101101000000110110000001100";
        ram[112] = "0b10111101000011010111100000000110";
        ram[113] = "0b00111110111011100110100101101110";
        ram[114] = "0b00111110110100111100100010100110";
        ram[115] = "0b00111110101011001111010111110010";
        ram[116] = "0b00111110100111100110110111010101";
        ram[117] = "0b10111100110011011101101101101011";
        ram[118] = "0b00111110011001111101111000000111";
        ram[119] = "0b00111111000000010100001100111000";
        ram[120] = "0b00111110000011100011010110010000";
        ram[121] = "0b00111110100111100111000011110111";
        ram[122] = "0b00111110101011100100011100110001";
        ram[123] = "0b00111110100011101000110100110011";
        ram[124] = "0b00111110101011110010110100001101";
        ram[125] = "0b00111101111100101111111000111111";
        ram[126] = "0b00111110100010011110100011001000";
        ram[127] = "0b00111110110110000000110101110011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(infer_Bias0_f) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 128;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


infer_Bias0_f_ram* meminst;


SC_CTOR(infer_Bias0_f) {
meminst = new infer_Bias0_f_ram("infer_Bias0_f_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~infer_Bias0_f() {
    delete meminst;
}


};//endmodule
#endif
