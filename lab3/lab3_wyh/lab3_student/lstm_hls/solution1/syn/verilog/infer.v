// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_q0
);

parameter    ap_ST_fsm_state1 = 117'd1;
parameter    ap_ST_fsm_state2 = 117'd2;
parameter    ap_ST_fsm_state3 = 117'd4;
parameter    ap_ST_fsm_state4 = 117'd8;
parameter    ap_ST_fsm_state5 = 117'd16;
parameter    ap_ST_fsm_state6 = 117'd32;
parameter    ap_ST_fsm_state7 = 117'd64;
parameter    ap_ST_fsm_state8 = 117'd128;
parameter    ap_ST_fsm_state9 = 117'd256;
parameter    ap_ST_fsm_state10 = 117'd512;
parameter    ap_ST_fsm_state11 = 117'd1024;
parameter    ap_ST_fsm_state12 = 117'd2048;
parameter    ap_ST_fsm_state13 = 117'd4096;
parameter    ap_ST_fsm_state14 = 117'd8192;
parameter    ap_ST_fsm_state15 = 117'd16384;
parameter    ap_ST_fsm_state16 = 117'd32768;
parameter    ap_ST_fsm_state17 = 117'd65536;
parameter    ap_ST_fsm_state18 = 117'd131072;
parameter    ap_ST_fsm_state19 = 117'd262144;
parameter    ap_ST_fsm_state20 = 117'd524288;
parameter    ap_ST_fsm_state21 = 117'd1048576;
parameter    ap_ST_fsm_state22 = 117'd2097152;
parameter    ap_ST_fsm_state23 = 117'd4194304;
parameter    ap_ST_fsm_state24 = 117'd8388608;
parameter    ap_ST_fsm_state25 = 117'd16777216;
parameter    ap_ST_fsm_state26 = 117'd33554432;
parameter    ap_ST_fsm_state27 = 117'd67108864;
parameter    ap_ST_fsm_state28 = 117'd134217728;
parameter    ap_ST_fsm_state29 = 117'd268435456;
parameter    ap_ST_fsm_state30 = 117'd536870912;
parameter    ap_ST_fsm_state31 = 117'd1073741824;
parameter    ap_ST_fsm_state32 = 117'd2147483648;
parameter    ap_ST_fsm_state33 = 117'd4294967296;
parameter    ap_ST_fsm_state34 = 117'd8589934592;
parameter    ap_ST_fsm_state35 = 117'd17179869184;
parameter    ap_ST_fsm_state36 = 117'd34359738368;
parameter    ap_ST_fsm_state37 = 117'd68719476736;
parameter    ap_ST_fsm_state38 = 117'd137438953472;
parameter    ap_ST_fsm_state39 = 117'd274877906944;
parameter    ap_ST_fsm_state40 = 117'd549755813888;
parameter    ap_ST_fsm_state41 = 117'd1099511627776;
parameter    ap_ST_fsm_state42 = 117'd2199023255552;
parameter    ap_ST_fsm_state43 = 117'd4398046511104;
parameter    ap_ST_fsm_state44 = 117'd8796093022208;
parameter    ap_ST_fsm_state45 = 117'd17592186044416;
parameter    ap_ST_fsm_state46 = 117'd35184372088832;
parameter    ap_ST_fsm_state47 = 117'd70368744177664;
parameter    ap_ST_fsm_state48 = 117'd140737488355328;
parameter    ap_ST_fsm_state49 = 117'd281474976710656;
parameter    ap_ST_fsm_state50 = 117'd562949953421312;
parameter    ap_ST_fsm_state51 = 117'd1125899906842624;
parameter    ap_ST_fsm_state52 = 117'd2251799813685248;
parameter    ap_ST_fsm_state53 = 117'd4503599627370496;
parameter    ap_ST_fsm_state54 = 117'd9007199254740992;
parameter    ap_ST_fsm_state55 = 117'd18014398509481984;
parameter    ap_ST_fsm_state56 = 117'd36028797018963968;
parameter    ap_ST_fsm_state57 = 117'd72057594037927936;
parameter    ap_ST_fsm_state58 = 117'd144115188075855872;
parameter    ap_ST_fsm_state59 = 117'd288230376151711744;
parameter    ap_ST_fsm_state60 = 117'd576460752303423488;
parameter    ap_ST_fsm_state61 = 117'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 117'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 117'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 117'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 117'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 117'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 117'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 117'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 117'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 117'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 117'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 117'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 117'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 117'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 117'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 117'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 117'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 117'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 117'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 117'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 117'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 117'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 117'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 117'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 117'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 117'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 117'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 117'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 117'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 117'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 117'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 117'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 117'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 117'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 117'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 117'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 117'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 117'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 117'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 117'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 117'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 117'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 117'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 117'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 117'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 117'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 117'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 117'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 117'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 117'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 117'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 117'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 117'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 117'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 117'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 117'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 117'd83076749736557242056487941267521536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;
input  [31:0] res_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[3:0] res_address0;
reg res_ce0;
reg res_we0;
reg[31:0] res_d0;

(* fsm_encoding = "none" *) reg   [116:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] Weight0_f_address0;
reg    Weight0_f_ce0;
wire   [31:0] Weight0_f_q0;
reg    Bias0_f_ce0;
wire   [31:0] Bias0_f_q0;
wire   [14:0] Weight0_i_address0;
reg    Weight0_i_ce0;
wire   [31:0] Weight0_i_q0;
reg    Bias0_i_ce0;
wire   [31:0] Bias0_i_q0;
wire   [14:0] Weight0_c_address0;
reg    Weight0_c_ce0;
wire   [31:0] Weight0_c_q0;
reg    Bias0_c_ce0;
wire   [31:0] Bias0_c_q0;
wire   [14:0] Weight0_o_address0;
reg    Weight0_o_ce0;
wire   [31:0] Weight0_o_q0;
reg    Bias0_o_ce0;
wire   [31:0] Bias0_o_q0;
wire   [10:0] Weight_lc_address0;
reg    Weight_lc_ce0;
wire   [31:0] Weight_lc_q0;
wire   [3:0] Bias_lc_address0;
reg    Bias_lc_ce0;
wire   [31:0] Bias_lc_q0;
wire   [31:0] vec_i_q0;
reg   [31:0] reg_812;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state71;
wire   [31:0] grp_fu_808_p2;
reg   [31:0] reg_817;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state103;
wire   [31:0] vec_tmp_q0;
reg   [31:0] reg_822;
wire    ap_CS_fsm_state65;
wire   [31:0] grp_fu_804_p2;
reg   [31:0] reg_828;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state116;
reg   [31:0] reg_834;
wire    ap_CS_fsm_state111;
wire   [6:0] add_ln67_fu_839_p2;
wire    ap_CS_fsm_state2;
wire   [6:0] add_ln68_fu_856_p2;
wire    ap_CS_fsm_state3;
wire   [6:0] add_ln69_fu_873_p2;
wire    ap_CS_fsm_state4;
wire   [6:0] add_ln70_fu_890_p2;
wire    ap_CS_fsm_state5;
wire   [6:0] add_ln71_fu_907_p2;
wire    ap_CS_fsm_state6;
wire   [6:0] add_ln72_fu_924_p2;
wire    ap_CS_fsm_state7;
wire   [4:0] i_3_fu_947_p2;
reg   [4:0] i_3_reg_1446;
wire    ap_CS_fsm_state8;
wire   [10:0] sub_ln106_fu_977_p2;
reg   [10:0] sub_ln106_reg_1451;
wire   [0:0] icmp_ln78_fu_941_p2;
wire   [4:0] j_fu_993_p2;
reg   [4:0] j_reg_1459;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln105_fu_987_p2;
wire   [7:0] j_1_fu_1024_p2;
reg   [7:0] j_1_reg_1472;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln107_fu_1018_p2;
wire   [14:0] add_ln113_1_fu_1046_p2;
reg   [14:0] add_ln113_1_reg_1482;
wire    ap_CS_fsm_state14;
wire   [7:0] r_1_fu_1058_p2;
reg   [7:0] r_1_reg_1490;
reg   [6:0] vec_tmp_addr_reg_1495;
wire   [0:0] icmp_ln113_fu_1052_p2;
wire   [7:0] c_1_fu_1075_p2;
reg   [7:0] c_1_reg_1503;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln113_1_fu_1069_p2;
reg   [31:0] Weight0_f_load_reg_1518;
wire   [14:0] add_ln120_1_fu_1101_p2;
reg   [14:0] add_ln120_1_reg_1523;
wire    ap_CS_fsm_state32;
wire   [7:0] r_2_fu_1113_p2;
reg   [7:0] r_2_reg_1531;
reg   [6:0] vec_tmp_addr_1_reg_1536;
wire   [0:0] icmp_ln120_fu_1107_p2;
wire   [7:0] c_2_fu_1130_p2;
reg   [7:0] c_2_reg_1544;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln120_1_fu_1124_p2;
reg   [31:0] Weight0_i_load_reg_1559;
wire   [14:0] add_ln127_1_fu_1156_p2;
reg   [14:0] add_ln127_1_reg_1564;
wire    ap_CS_fsm_state50;
wire   [7:0] r_3_fu_1168_p2;
reg   [7:0] r_3_reg_1572;
reg   [6:0] vec_tmp_addr_2_reg_1577;
wire   [0:0] icmp_ln127_fu_1162_p2;
wire   [7:0] c_3_fu_1185_p2;
reg   [7:0] c_3_reg_1585;
wire    ap_CS_fsm_state51;
wire   [0:0] icmp_ln127_1_fu_1179_p2;
reg   [31:0] Weight0_c_load_reg_1600;
wire   [7:0] i_2_fu_1217_p2;
reg   [7:0] i_2_reg_1608;
wire    ap_CS_fsm_state64;
wire   [63:0] zext_ln34_fu_1223_p1;
reg   [63:0] zext_ln34_reg_1613;
wire   [0:0] icmp_ln32_fu_1211_p2;
wire   [14:0] add_ln134_1_fu_1228_p2;
reg   [14:0] add_ln134_1_reg_1623;
wire    ap_CS_fsm_state69;
wire   [7:0] r_4_fu_1240_p2;
reg   [7:0] r_4_reg_1631;
reg   [6:0] vec_tmp_addr_4_reg_1636;
wire   [0:0] icmp_ln134_fu_1234_p2;
wire   [7:0] c_4_fu_1257_p2;
reg   [7:0] c_4_reg_1644;
wire    ap_CS_fsm_state70;
wire   [0:0] icmp_ln134_1_fu_1251_p2;
reg   [31:0] Weight0_o_load_reg_1659;
wire   [7:0] i_4_fu_1289_p2;
reg   [7:0] i_4_reg_1667;
wire    ap_CS_fsm_state91;
wire   [63:0] zext_ln34_1_fu_1295_p1;
reg   [63:0] zext_ln34_1_reg_1672;
wire   [0:0] icmp_ln32_1_fu_1283_p2;
wire   [31:0] C_t_q0;
reg   [31:0] C_t_load_reg_1682;
wire    ap_CS_fsm_state92;
wire   [3:0] add_ln762_fu_1311_p2;
wire    ap_CS_fsm_state96;
wire   [3:0] r_fu_1323_p2;
reg   [3:0] r_reg_1698;
wire    ap_CS_fsm_state97;
wire   [11:0] zext_ln157_2_fu_1342_p1;
reg   [11:0] zext_ln157_2_reg_1703;
wire   [0:0] icmp_ln157_fu_1317_p2;
reg   [3:0] res_addr_reg_1708;
wire   [7:0] c_fu_1352_p2;
reg   [7:0] c_reg_1716;
wire    ap_CS_fsm_state98;
wire   [0:0] icmp_ln157_1_fu_1346_p2;
reg   [31:0] Weight_lc_load_reg_1731;
wire    ap_CS_fsm_state99;
wire   [31:0] h_t_q0;
reg   [31:0] h_t_load_reg_1736;
wire   [3:0] i_fu_1383_p2;
reg   [3:0] i_reg_1744;
wire    ap_CS_fsm_state110;
wire   [0:0] icmp_ln43_fu_1377_p2;
reg   [3:0] res_addr_2_reg_1754;
reg   [31:0] Bias_lc_load_reg_1759;
reg   [6:0] gate_f_address0;
reg    gate_f_ce0;
reg    gate_f_we0;
reg   [31:0] gate_f_d0;
wire   [31:0] gate_f_q0;
reg   [6:0] gate_i_address0;
reg    gate_i_ce0;
reg    gate_i_we0;
reg   [31:0] gate_i_d0;
wire   [31:0] gate_i_q0;
reg   [6:0] stat_C_address0;
reg    stat_C_ce0;
reg    stat_C_we0;
reg   [31:0] stat_C_d0;
wire   [31:0] stat_C_q0;
reg   [6:0] C_t_address0;
reg    C_t_ce0;
reg    C_t_we0;
reg   [31:0] C_t_d0;
reg   [6:0] gate_o_address0;
reg    gate_o_ce0;
reg    gate_o_we0;
reg   [31:0] gate_o_d0;
wire   [31:0] gate_o_q0;
reg   [6:0] h_t_address0;
reg    h_t_ce0;
reg    h_t_we0;
reg   [31:0] h_t_d0;
reg   [7:0] vec_i_address0;
reg    vec_i_ce0;
reg    vec_i_we0;
reg   [31:0] vec_i_d0;
reg   [6:0] vec_tmp_address0;
reg    vec_tmp_ce0;
reg    vec_tmp_we0;
reg   [31:0] vec_tmp_d0;
wire    grp_sigmoid_fu_763_ap_start;
wire    grp_sigmoid_fu_763_ap_done;
wire    grp_sigmoid_fu_763_ap_idle;
wire    grp_sigmoid_fu_763_ap_ready;
wire   [6:0] grp_sigmoid_fu_763_res_address0;
wire    grp_sigmoid_fu_763_res_ce0;
wire    grp_sigmoid_fu_763_res_we0;
wire   [31:0] grp_sigmoid_fu_763_res_d0;
wire   [6:0] grp_sigmoid_fu_763_a_address0;
wire    grp_sigmoid_fu_763_a_ce0;
wire    grp_generic_tanh_float_s_fu_769_ap_start;
wire    grp_generic_tanh_float_s_fu_769_ap_done;
wire    grp_generic_tanh_float_s_fu_769_ap_idle;
wire    grp_generic_tanh_float_s_fu_769_ap_ready;
reg   [31:0] grp_generic_tanh_float_s_fu_769_t_in;
wire   [31:0] grp_generic_tanh_float_s_fu_769_ap_return;
wire    grp_geva_1_fu_782_ap_start;
wire    grp_geva_1_fu_782_ap_done;
wire    grp_geva_1_fu_782_ap_idle;
wire    grp_geva_1_fu_782_ap_ready;
wire   [6:0] grp_geva_1_fu_782_res_address0;
wire    grp_geva_1_fu_782_res_ce0;
wire    grp_geva_1_fu_782_res_we0;
wire   [31:0] grp_geva_1_fu_782_res_d0;
reg   [31:0] grp_geva_1_fu_782_res_q0;
wire   [6:0] grp_geva_1_fu_782_a_address0;
wire    grp_geva_1_fu_782_a_ce0;
reg   [31:0] grp_geva_1_fu_782_a_q0;
wire    grp_hprod_fu_792_ap_start;
wire    grp_hprod_fu_792_ap_done;
wire    grp_hprod_fu_792_ap_idle;
wire    grp_hprod_fu_792_ap_ready;
wire   [6:0] grp_hprod_fu_792_res_address0;
wire    grp_hprod_fu_792_res_ce0;
wire    grp_hprod_fu_792_res_we0;
wire   [31:0] grp_hprod_fu_792_res_d0;
wire   [6:0] grp_hprod_fu_792_a_address0;
wire    grp_hprod_fu_792_a_ce0;
reg   [31:0] grp_hprod_fu_792_a_q0;
wire   [6:0] grp_hprod_fu_792_b_address0;
wire    grp_hprod_fu_792_b_ce0;
reg   [31:0] grp_hprod_fu_792_b_q0;
wire    grp_fill_n_fu_799_ap_start;
wire    grp_fill_n_fu_799_ap_done;
wire    grp_fill_n_fu_799_ap_idle;
wire    grp_fill_n_fu_799_ap_ready;
wire   [6:0] grp_fill_n_fu_799_p_first_address0;
wire    grp_fill_n_fu_799_p_first_ce0;
wire    grp_fill_n_fu_799_p_first_we0;
wire   [31:0] grp_fill_n_fu_799_p_first_d0;
reg   [6:0] phi_ln67_reg_460;
wire   [0:0] icmp_ln67_fu_850_p2;
reg   [6:0] phi_ln68_reg_471;
wire   [0:0] icmp_ln68_fu_867_p2;
reg   [6:0] phi_ln69_reg_482;
wire   [0:0] icmp_ln69_fu_884_p2;
reg   [6:0] phi_ln70_reg_493;
wire   [0:0] icmp_ln70_fu_901_p2;
reg   [6:0] phi_ln71_reg_504;
wire   [0:0] icmp_ln71_fu_918_p2;
reg   [6:0] phi_ln72_reg_515;
wire   [0:0] icmp_ln72_fu_935_p2;
reg   [4:0] i_0_reg_526;
wire    ap_CS_fsm_state95;
reg   [4:0] j_0_reg_537;
wire    ap_CS_fsm_state10;
reg   [7:0] j1_0_reg_549;
wire    ap_CS_fsm_state12;
reg   [7:0] r_0_reg_561;
wire    ap_CS_fsm_state13;
reg   [14:0] phi_mul_reg_572;
reg   [7:0] c_0_reg_584;
wire    ap_CS_fsm_state26;
reg   [7:0] r2_0_reg_595;
wire    ap_CS_fsm_state31;
reg   [14:0] phi_mul889_reg_606;
reg   [7:0] c3_0_reg_618;
wire    ap_CS_fsm_state44;
reg   [7:0] r4_0_reg_629;
wire    ap_CS_fsm_state49;
reg   [14:0] phi_mul891_reg_640;
reg   [7:0] c5_0_reg_652;
wire    ap_CS_fsm_state62;
reg   [7:0] i_0_i_reg_663;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state67;
reg   [7:0] r6_0_reg_674;
wire    ap_CS_fsm_state68;
reg   [14:0] phi_mul893_reg_685;
reg   [7:0] c7_0_reg_697;
wire    ap_CS_fsm_state81;
reg   [7:0] i_0_i9_reg_708;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state94;
reg   [3:0] p_0_rec_i_i_reg_719;
wire   [0:0] icmp_ln762_fu_1305_p2;
reg   [3:0] r8_0_reg_730;
reg   [7:0] c9_0_reg_741;
wire    ap_CS_fsm_state109;
reg   [3:0] i_0_i18_reg_752;
wire    ap_CS_fsm_state117;
reg    grp_sigmoid_fu_763_ap_start_reg;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state84;
reg    grp_generic_tanh_float_s_fu_769_ap_start_reg;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state93;
reg    grp_geva_1_fu_782_ap_start_reg;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state82;
reg    grp_hprod_fu_792_ap_start_reg;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state88;
reg    grp_fill_n_fu_799_ap_start_reg;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state48;
wire   [63:0] zext_ln67_fu_845_p1;
wire   [63:0] zext_ln68_fu_862_p1;
wire   [63:0] zext_ln69_fu_879_p1;
wire   [63:0] zext_ln70_fu_896_p1;
wire   [63:0] zext_ln71_fu_913_p1;
wire   [63:0] zext_ln72_fu_930_p1;
wire   [63:0] zext_ln106_fu_1008_p1;
wire   [63:0] zext_ln106_1_fu_1013_p1;
wire   [63:0] zext_ln108_fu_1030_p1;
wire   [63:0] zext_ln108_1_fu_1041_p1;
wire   [63:0] zext_ln113_fu_1064_p1;
wire   [63:0] zext_ln113_3_fu_1096_p1;
wire   [63:0] zext_ln113_1_fu_1081_p1;
wire   [63:0] zext_ln120_fu_1119_p1;
wire   [63:0] zext_ln120_3_fu_1151_p1;
wire   [63:0] zext_ln120_1_fu_1136_p1;
wire   [63:0] zext_ln127_fu_1174_p1;
wire   [63:0] zext_ln127_3_fu_1206_p1;
wire   [63:0] zext_ln127_1_fu_1191_p1;
wire   [63:0] zext_ln134_fu_1246_p1;
wire   [63:0] zext_ln134_3_fu_1278_p1;
wire   [63:0] zext_ln134_1_fu_1263_p1;
wire   [63:0] p_0_rec_i_i_cast_fu_1300_p1;
wire   [63:0] zext_ln157_fu_1329_p1;
wire   [63:0] zext_ln157_4_fu_1372_p1;
wire   [63:0] zext_ln157_1_fu_1358_p1;
wire   [63:0] zext_ln45_fu_1389_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state102;
reg   [31:0] grp_fu_804_p0;
reg   [31:0] grp_fu_804_p1;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state112;
reg   [31:0] grp_fu_808_p0;
reg   [31:0] grp_fu_808_p1;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state100;
wire   [9:0] shl_ln_fu_953_p3;
wire   [6:0] shl_ln106_1_fu_965_p3;
wire   [10:0] zext_ln106_2_fu_961_p1;
wire   [10:0] zext_ln106_3_fu_973_p1;
wire   [10:0] zext_ln105_fu_983_p1;
wire   [10:0] add_ln106_fu_999_p2;
wire  signed [31:0] sext_ln106_fu_1004_p1;
wire   [7:0] add_ln108_fu_1035_p2;
wire   [14:0] zext_ln113_2_fu_1086_p1;
wire   [14:0] add_ln113_fu_1090_p2;
wire   [14:0] zext_ln120_2_fu_1141_p1;
wire   [14:0] add_ln120_fu_1145_p2;
wire   [14:0] zext_ln127_2_fu_1196_p1;
wire   [14:0] add_ln127_fu_1200_p2;
wire   [14:0] zext_ln134_2_fu_1268_p1;
wire   [14:0] add_ln134_fu_1272_p2;
wire   [10:0] tmp_5_fu_1334_p3;
wire   [11:0] zext_ln157_3_fu_1363_p1;
wire   [11:0] add_ln157_fu_1367_p2;
reg   [116:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 117'd1;
#0 grp_sigmoid_fu_763_ap_start_reg = 1'b0;
#0 grp_generic_tanh_float_s_fu_769_ap_start_reg = 1'b0;
#0 grp_geva_1_fu_782_ap_start_reg = 1'b0;
#0 grp_hprod_fu_792_ap_start_reg = 1'b0;
#0 grp_fill_n_fu_799_ap_start_reg = 1'b0;
end

infer_Weight0_f #(
    .DataWidth( 32 ),
    .AddressRange( 19968 ),
    .AddressWidth( 15 ))
Weight0_f_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Weight0_f_address0),
    .ce0(Weight0_f_ce0),
    .q0(Weight0_f_q0)
);

infer_Bias0_f #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
Bias0_f_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_geva_1_fu_782_a_address0),
    .ce0(Bias0_f_ce0),
    .q0(Bias0_f_q0)
);

infer_Weight0_i #(
    .DataWidth( 32 ),
    .AddressRange( 19968 ),
    .AddressWidth( 15 ))
Weight0_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Weight0_i_address0),
    .ce0(Weight0_i_ce0),
    .q0(Weight0_i_q0)
);

infer_Bias0_i #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
Bias0_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_geva_1_fu_782_a_address0),
    .ce0(Bias0_i_ce0),
    .q0(Bias0_i_q0)
);

infer_Weight0_c #(
    .DataWidth( 32 ),
    .AddressRange( 19968 ),
    .AddressWidth( 15 ))
Weight0_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Weight0_c_address0),
    .ce0(Weight0_c_ce0),
    .q0(Weight0_c_q0)
);

infer_Bias0_c #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
Bias0_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_geva_1_fu_782_a_address0),
    .ce0(Bias0_c_ce0),
    .q0(Bias0_c_q0)
);

infer_Weight0_o #(
    .DataWidth( 32 ),
    .AddressRange( 19968 ),
    .AddressWidth( 15 ))
Weight0_o_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Weight0_o_address0),
    .ce0(Weight0_o_ce0),
    .q0(Weight0_o_q0)
);

infer_Bias0_o #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
Bias0_o_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_geva_1_fu_782_a_address0),
    .ce0(Bias0_o_ce0),
    .q0(Bias0_o_q0)
);

infer_Weight_lc #(
    .DataWidth( 32 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
Weight_lc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Weight_lc_address0),
    .ce0(Weight_lc_ce0),
    .q0(Weight_lc_q0)
);

infer_Bias_lc #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
Bias_lc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Bias_lc_address0),
    .ce0(Bias_lc_ce0),
    .q0(Bias_lc_q0)
);

infer_gate_f #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
gate_f_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gate_f_address0),
    .ce0(gate_f_ce0),
    .we0(gate_f_we0),
    .d0(gate_f_d0),
    .q0(gate_f_q0)
);

infer_gate_f #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
gate_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gate_i_address0),
    .ce0(gate_i_ce0),
    .we0(gate_i_we0),
    .d0(gate_i_d0),
    .q0(gate_i_q0)
);

infer_gate_f #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
stat_C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(stat_C_address0),
    .ce0(stat_C_ce0),
    .we0(stat_C_we0),
    .d0(stat_C_d0),
    .q0(stat_C_q0)
);

infer_gate_f #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_t_address0),
    .ce0(C_t_ce0),
    .we0(C_t_we0),
    .d0(C_t_d0),
    .q0(C_t_q0)
);

infer_gate_f #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
gate_o_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gate_o_address0),
    .ce0(gate_o_ce0),
    .we0(gate_o_we0),
    .d0(gate_o_d0),
    .q0(gate_o_q0)
);

infer_gate_f #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
h_t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(h_t_address0),
    .ce0(h_t_ce0),
    .we0(h_t_we0),
    .d0(h_t_d0),
    .q0(h_t_q0)
);

infer_vec_i #(
    .DataWidth( 32 ),
    .AddressRange( 156 ),
    .AddressWidth( 8 ))
vec_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vec_i_address0),
    .ce0(vec_i_ce0),
    .we0(vec_i_we0),
    .d0(vec_i_d0),
    .q0(vec_i_q0)
);

infer_gate_f #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
vec_tmp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vec_tmp_address0),
    .ce0(vec_tmp_ce0),
    .we0(vec_tmp_we0),
    .d0(vec_tmp_d0),
    .q0(vec_tmp_q0)
);

sigmoid grp_sigmoid_fu_763(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sigmoid_fu_763_ap_start),
    .ap_done(grp_sigmoid_fu_763_ap_done),
    .ap_idle(grp_sigmoid_fu_763_ap_idle),
    .ap_ready(grp_sigmoid_fu_763_ap_ready),
    .res_address0(grp_sigmoid_fu_763_res_address0),
    .res_ce0(grp_sigmoid_fu_763_res_ce0),
    .res_we0(grp_sigmoid_fu_763_res_we0),
    .res_d0(grp_sigmoid_fu_763_res_d0),
    .a_address0(grp_sigmoid_fu_763_a_address0),
    .a_ce0(grp_sigmoid_fu_763_a_ce0),
    .a_q0(vec_tmp_q0)
);

generic_tanh_float_s grp_generic_tanh_float_s_fu_769(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_generic_tanh_float_s_fu_769_ap_start),
    .ap_done(grp_generic_tanh_float_s_fu_769_ap_done),
    .ap_idle(grp_generic_tanh_float_s_fu_769_ap_idle),
    .ap_ready(grp_generic_tanh_float_s_fu_769_ap_ready),
    .t_in(grp_generic_tanh_float_s_fu_769_t_in),
    .ap_return(grp_generic_tanh_float_s_fu_769_ap_return)
);

geva_1 grp_geva_1_fu_782(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_geva_1_fu_782_ap_start),
    .ap_done(grp_geva_1_fu_782_ap_done),
    .ap_idle(grp_geva_1_fu_782_ap_idle),
    .ap_ready(grp_geva_1_fu_782_ap_ready),
    .res_address0(grp_geva_1_fu_782_res_address0),
    .res_ce0(grp_geva_1_fu_782_res_ce0),
    .res_we0(grp_geva_1_fu_782_res_we0),
    .res_d0(grp_geva_1_fu_782_res_d0),
    .res_q0(grp_geva_1_fu_782_res_q0),
    .a_address0(grp_geva_1_fu_782_a_address0),
    .a_ce0(grp_geva_1_fu_782_a_ce0),
    .a_q0(grp_geva_1_fu_782_a_q0)
);

hprod grp_hprod_fu_792(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_hprod_fu_792_ap_start),
    .ap_done(grp_hprod_fu_792_ap_done),
    .ap_idle(grp_hprod_fu_792_ap_idle),
    .ap_ready(grp_hprod_fu_792_ap_ready),
    .res_address0(grp_hprod_fu_792_res_address0),
    .res_ce0(grp_hprod_fu_792_res_ce0),
    .res_we0(grp_hprod_fu_792_res_we0),
    .res_d0(grp_hprod_fu_792_res_d0),
    .a_address0(grp_hprod_fu_792_a_address0),
    .a_ce0(grp_hprod_fu_792_a_ce0),
    .a_q0(grp_hprod_fu_792_a_q0),
    .b_address0(grp_hprod_fu_792_b_address0),
    .b_ce0(grp_hprod_fu_792_b_ce0),
    .b_q0(grp_hprod_fu_792_b_q0)
);

fill_n grp_fill_n_fu_799(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fill_n_fu_799_ap_start),
    .ap_done(grp_fill_n_fu_799_ap_done),
    .ap_idle(grp_fill_n_fu_799_ap_idle),
    .ap_ready(grp_fill_n_fu_799_ap_ready),
    .p_first_address0(grp_fill_n_fu_799_p_first_address0),
    .p_first_ce0(grp_fill_n_fu_799_p_first_ce0),
    .p_first_we0(grp_fill_n_fu_799_p_first_we0),
    .p_first_d0(grp_fill_n_fu_799_p_first_d0)
);

LSTM_Top_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LSTM_Top_fadd_32nbkb_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_804_p0),
    .din1(grp_fu_804_p1),
    .ce(1'b1),
    .dout(grp_fu_804_p2)
);

LSTM_Top_fmul_32nqcK #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LSTM_Top_fmul_32nqcK_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_808_p0),
    .din1(grp_fu_808_p1),
    .ce(1'b1),
    .dout(grp_fu_808_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fill_n_fu_799_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state30) | ((icmp_ln32_fu_1211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state64)) | ((icmp_ln107_fu_1018_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
            grp_fill_n_fu_799_ap_start_reg <= 1'b1;
        end else if ((grp_fill_n_fu_799_ap_ready == 1'b1)) begin
            grp_fill_n_fu_799_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_generic_tanh_float_s_fu_769_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state66))) begin
            grp_generic_tanh_float_s_fu_769_ap_start_reg <= 1'b1;
        end else if ((grp_generic_tanh_float_s_fu_769_ap_ready == 1'b1)) begin
            grp_generic_tanh_float_s_fu_769_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_geva_1_fu_782_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state89) | ((icmp_ln134_fu_1234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state69)) | ((icmp_ln127_fu_1162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50)) | ((icmp_ln120_fu_1107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32)) | ((icmp_ln113_fu_1052_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14)))) begin
            grp_geva_1_fu_782_ap_start_reg <= 1'b1;
        end else if ((grp_geva_1_fu_782_ap_ready == 1'b1)) begin
            grp_geva_1_fu_782_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_hprod_fu_792_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | ((icmp_ln32_1_fu_1283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state91)))) begin
            grp_hprod_fu_792_ap_start_reg <= 1'b1;
        end else if ((grp_hprod_fu_792_ap_ready == 1'b1)) begin
            grp_hprod_fu_792_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sigmoid_fu_763_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state28))) begin
            grp_sigmoid_fu_763_ap_start_reg <= 1'b1;
        end else if ((grp_sigmoid_fu_763_ap_ready == 1'b1)) begin
            grp_sigmoid_fu_763_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_fu_1107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
        c3_0_reg_618 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        c3_0_reg_618 <= c_2_reg_1544;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_fu_1162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        c5_0_reg_652 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        c5_0_reg_652 <= c_3_reg_1585;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln134_fu_1234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state69))) begin
        c7_0_reg_697 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        c7_0_reg_697 <= c_4_reg_1644;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_fu_1317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state97))) begin
        c9_0_reg_741 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        c9_0_reg_741 <= c_reg_1716;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_fu_1052_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        c_0_reg_584 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        c_0_reg_584 <= c_1_reg_1503;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_fu_1317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state97))) begin
        i_0_i18_reg_752 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        i_0_i18_reg_752 <= i_reg_1744;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_generic_tanh_float_s_fu_769_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state94))) begin
        i_0_i9_reg_708 <= i_4_reg_1667;
    end else if (((grp_geva_1_fu_782_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state90))) begin
        i_0_i9_reg_708 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_generic_tanh_float_s_fu_769_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
        i_0_i_reg_663 <= i_2_reg_1608;
    end else if (((grp_geva_1_fu_782_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
        i_0_i_reg_663 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_935_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_0_reg_526 <= 5'd0;
    end else if (((grp_hprod_fu_792_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state95))) begin
        i_0_reg_526 <= i_3_reg_1446;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln105_fu_987_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        j1_0_reg_549 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j1_0_reg_549 <= j_1_reg_1472;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_941_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        j_0_reg_537 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j_0_reg_537 <= j_reg_1459;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_941_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        p_0_rec_i_i_reg_719 <= 4'd0;
    end else if (((icmp_ln762_fu_1305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state96))) begin
        p_0_rec_i_i_reg_719 <= add_ln762_fu_1311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln67_reg_460 <= add_ln67_fu_839_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln67_reg_460 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln68_reg_471 <= 7'd0;
    end else if (((icmp_ln68_fu_867_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln68_reg_471 <= add_ln68_fu_856_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln69_reg_482 <= 7'd0;
    end else if (((icmp_ln69_fu_884_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln69_reg_482 <= add_ln69_fu_873_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_884_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln70_reg_493 <= 7'd0;
    end else if (((icmp_ln70_fu_901_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_ln70_reg_493 <= add_ln70_fu_890_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_901_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_ln71_reg_504 <= 7'd0;
    end else if (((icmp_ln71_fu_918_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_ln71_reg_504 <= add_ln71_fu_907_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_918_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_ln72_reg_515 <= 7'd0;
    end else if (((icmp_ln72_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_ln72_reg_515 <= add_ln72_fu_924_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_1_fu_1124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        phi_mul889_reg_606 <= add_ln120_1_reg_1523;
    end else if (((grp_fill_n_fu_799_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
        phi_mul889_reg_606 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_1_fu_1179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        phi_mul891_reg_640 <= add_ln127_1_reg_1564;
    end else if (((grp_fill_n_fu_799_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
        phi_mul891_reg_640 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln134_1_fu_1251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state70))) begin
        phi_mul893_reg_685 <= add_ln134_1_reg_1623;
    end else if (((grp_fill_n_fu_799_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state68))) begin
        phi_mul893_reg_685 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_1_fu_1069_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        phi_mul_reg_572 <= add_ln113_1_reg_1482;
    end else if (((grp_fill_n_fu_799_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        phi_mul_reg_572 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_1_fu_1124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        r2_0_reg_595 <= r_2_reg_1531;
    end else if (((grp_fill_n_fu_799_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
        r2_0_reg_595 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_1_fu_1179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        r4_0_reg_629 <= r_3_reg_1572;
    end else if (((grp_fill_n_fu_799_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
        r4_0_reg_629 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln134_1_fu_1251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state70))) begin
        r6_0_reg_674 <= r_4_reg_1631;
    end else if (((grp_fill_n_fu_799_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state68))) begin
        r6_0_reg_674 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln762_fu_1305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
        r8_0_reg_730 <= 4'd0;
    end else if (((icmp_ln157_1_fu_1346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state98))) begin
        r8_0_reg_730 <= r_reg_1698;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_1_fu_1069_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        r_0_reg_561 <= r_1_reg_1490;
    end else if (((grp_fill_n_fu_799_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        r_0_reg_561 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        Bias_lc_load_reg_1759 <= Bias_lc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        C_t_load_reg_1682 <= C_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        Weight0_c_load_reg_1600 <= Weight0_c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        Weight0_f_load_reg_1518 <= Weight0_f_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        Weight0_i_load_reg_1559 <= Weight0_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        Weight0_o_load_reg_1659 <= Weight0_o_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        Weight_lc_load_reg_1731 <= Weight_lc_q0;
        h_t_load_reg_1736 <= h_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln113_1_reg_1482 <= add_ln113_1_fu_1046_p2;
        r_1_reg_1490 <= r_1_fu_1058_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        add_ln120_1_reg_1523 <= add_ln120_1_fu_1101_p2;
        r_2_reg_1531 <= r_2_fu_1113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        add_ln127_1_reg_1564 <= add_ln127_1_fu_1156_p2;
        r_3_reg_1572 <= r_3_fu_1168_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        add_ln134_1_reg_1623 <= add_ln134_1_fu_1228_p2;
        r_4_reg_1631 <= r_4_fu_1240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        c_1_reg_1503 <= c_1_fu_1075_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        c_2_reg_1544 <= c_2_fu_1130_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        c_3_reg_1585 <= c_3_fu_1185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        c_4_reg_1644 <= c_4_fu_1257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        c_reg_1716 <= c_fu_1352_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        i_2_reg_1608 <= i_2_fu_1217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_3_reg_1446 <= i_3_fu_947_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        i_4_reg_1667 <= i_4_fu_1289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        i_reg_1744 <= i_fu_1383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_1_reg_1472 <= j_1_fu_1024_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_1459 <= j_fu_993_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        r_reg_1698 <= r_fu_1323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_812 <= vec_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_817 <= grp_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_822 <= vec_tmp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state25))) begin
        reg_828 <= grp_fu_804_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state103))) begin
        reg_834 <= res_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_1377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state110))) begin
        res_addr_2_reg_1754 <= zext_ln45_fu_1389_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_fu_1317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state97))) begin
        res_addr_reg_1708 <= zext_ln157_fu_1329_p1;
        zext_ln157_2_reg_1703[10 : 7] <= zext_ln157_2_fu_1342_p1[10 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_941_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sub_ln106_reg_1451[10 : 2] <= sub_ln106_fu_977_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_fu_1107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
        vec_tmp_addr_1_reg_1536 <= zext_ln120_fu_1119_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_fu_1162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        vec_tmp_addr_2_reg_1577 <= zext_ln127_fu_1174_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln134_fu_1234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state69))) begin
        vec_tmp_addr_4_reg_1636 <= zext_ln134_fu_1246_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_fu_1052_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        vec_tmp_addr_reg_1495 <= zext_ln113_fu_1064_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_1_fu_1283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state91))) begin
        zext_ln34_1_reg_1672[7 : 0] <= zext_ln34_1_fu_1295_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_1211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state64))) begin
        zext_ln34_reg_1613[7 : 0] <= zext_ln34_fu_1223_p1[7 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        Bias0_c_ce0 = grp_geva_1_fu_782_a_ce0;
    end else begin
        Bias0_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        Bias0_f_ce0 = grp_geva_1_fu_782_a_ce0;
    end else begin
        Bias0_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        Bias0_i_ce0 = grp_geva_1_fu_782_a_ce0;
    end else begin
        Bias0_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        Bias0_o_ce0 = grp_geva_1_fu_782_a_ce0;
    end else begin
        Bias0_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        Bias_lc_ce0 = 1'b1;
    end else begin
        Bias_lc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        C_t_address0 = zext_ln34_1_fu_1295_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        C_t_address0 = zext_ln70_fu_896_p1;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        C_t_address0 = grp_hprod_fu_792_b_address0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        C_t_address0 = grp_hprod_fu_792_res_address0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        C_t_address0 = grp_geva_1_fu_782_res_address0;
    end else begin
        C_t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state5))) begin
        C_t_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        C_t_ce0 = grp_hprod_fu_792_b_ce0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        C_t_ce0 = grp_hprod_fu_792_res_ce0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        C_t_ce0 = grp_geva_1_fu_782_res_ce0;
    end else begin
        C_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_t_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        C_t_d0 = grp_hprod_fu_792_res_d0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        C_t_d0 = grp_geva_1_fu_782_res_d0;
    end else begin
        C_t_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_t_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        C_t_we0 = grp_hprod_fu_792_res_we0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        C_t_we0 = grp_geva_1_fu_782_res_we0;
    end else begin
        C_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        Weight0_c_ce0 = 1'b1;
    end else begin
        Weight0_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        Weight0_f_ce0 = 1'b1;
    end else begin
        Weight0_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        Weight0_i_ce0 = 1'b1;
    end else begin
        Weight0_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        Weight0_o_ce0 = 1'b1;
    end else begin
        Weight0_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        Weight_lc_ce0 = 1'b1;
    end else begin
        Weight_lc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln43_fu_1377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state110)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_1377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state110))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gate_f_address0 = zext_ln67_fu_845_p1;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        gate_f_address0 = grp_hprod_fu_792_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        gate_f_address0 = grp_sigmoid_fu_763_res_address0;
    end else begin
        gate_f_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gate_f_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        gate_f_ce0 = grp_hprod_fu_792_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        gate_f_ce0 = grp_sigmoid_fu_763_res_ce0;
    end else begin
        gate_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gate_f_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        gate_f_d0 = grp_sigmoid_fu_763_res_d0;
    end else begin
        gate_f_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gate_f_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        gate_f_we0 = grp_sigmoid_fu_763_res_we0;
    end else begin
        gate_f_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gate_i_address0 = zext_ln68_fu_862_p1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        gate_i_address0 = grp_hprod_fu_792_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        gate_i_address0 = grp_sigmoid_fu_763_res_address0;
    end else begin
        gate_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gate_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        gate_i_ce0 = grp_hprod_fu_792_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        gate_i_ce0 = grp_sigmoid_fu_763_res_ce0;
    end else begin
        gate_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gate_i_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        gate_i_d0 = grp_sigmoid_fu_763_res_d0;
    end else begin
        gate_i_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gate_i_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        gate_i_we0 = grp_sigmoid_fu_763_res_we0;
    end else begin
        gate_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gate_o_address0 = zext_ln71_fu_913_p1;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        gate_o_address0 = grp_hprod_fu_792_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        gate_o_address0 = grp_sigmoid_fu_763_res_address0;
    end else begin
        gate_o_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gate_o_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        gate_o_ce0 = grp_hprod_fu_792_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        gate_o_ce0 = grp_sigmoid_fu_763_res_ce0;
    end else begin
        gate_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gate_o_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        gate_o_d0 = grp_sigmoid_fu_763_res_d0;
    end else begin
        gate_o_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gate_o_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        gate_o_we0 = grp_sigmoid_fu_763_res_we0;
    end else begin
        gate_o_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state104))) begin
        grp_fu_804_p0 = reg_834;
    end else if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_804_p0 = reg_822;
    end else begin
        grp_fu_804_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        grp_fu_804_p1 = Bias_lc_load_reg_1759;
    end else if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_804_p1 = reg_817;
    end else begin
        grp_fu_804_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        grp_fu_808_p0 = Weight_lc_load_reg_1731;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_808_p0 = Weight0_o_load_reg_1659;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        grp_fu_808_p0 = Weight0_c_load_reg_1600;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_808_p0 = Weight0_i_load_reg_1559;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_808_p0 = Weight0_f_load_reg_1518;
    end else begin
        grp_fu_808_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        grp_fu_808_p1 = h_t_load_reg_1736;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_808_p1 = reg_812;
    end else begin
        grp_fu_808_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        grp_generic_tanh_float_s_fu_769_t_in = C_t_load_reg_1682;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_generic_tanh_float_s_fu_769_t_in = reg_822;
    end else begin
        grp_generic_tanh_float_s_fu_769_t_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_geva_1_fu_782_a_q0 = vec_tmp_q0;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_geva_1_fu_782_a_q0 = Bias0_o_q0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_geva_1_fu_782_a_q0 = Bias0_c_q0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_geva_1_fu_782_a_q0 = Bias0_i_q0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_geva_1_fu_782_a_q0 = Bias0_f_q0;
    end else begin
        grp_geva_1_fu_782_a_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_geva_1_fu_782_res_q0 = C_t_q0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27))) begin
        grp_geva_1_fu_782_res_q0 = vec_tmp_q0;
    end else begin
        grp_geva_1_fu_782_res_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_hprod_fu_792_a_q0 = gate_o_q0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_hprod_fu_792_a_q0 = gate_i_q0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_hprod_fu_792_a_q0 = gate_f_q0;
    end else begin
        grp_hprod_fu_792_a_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_hprod_fu_792_b_q0 = vec_tmp_q0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_hprod_fu_792_b_q0 = stat_C_q0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_hprod_fu_792_b_q0 = C_t_q0;
    end else begin
        grp_hprod_fu_792_b_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        h_t_address0 = zext_ln157_1_fu_1358_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        h_t_address0 = zext_ln108_fu_1030_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        h_t_address0 = zext_ln72_fu_930_p1;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        h_t_address0 = grp_hprod_fu_792_res_address0;
    end else begin
        h_t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        h_t_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        h_t_ce0 = grp_hprod_fu_792_res_ce0;
    end else begin
        h_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        h_t_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        h_t_d0 = grp_hprod_fu_792_res_d0;
    end else begin
        h_t_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        h_t_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        h_t_we0 = grp_hprod_fu_792_res_we0;
    end else begin
        h_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        res_address0 = res_addr_2_reg_1754;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        res_address0 = zext_ln45_fu_1389_p1;
    end else if (((1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state102))) begin
        res_address0 = res_addr_reg_1708;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        res_address0 = p_0_rec_i_i_cast_fu_1300_p1;
    end else begin
        res_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state102))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state109))) begin
        res_d0 = reg_828;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        res_d0 = 32'd0;
    end else begin
        res_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state109) | ((icmp_ln762_fu_1305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state96)))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        stat_C_address0 = zext_ln34_reg_1613;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        stat_C_address0 = zext_ln69_fu_879_p1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        stat_C_address0 = grp_hprod_fu_792_b_address0;
    end else begin
        stat_C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((grp_generic_tanh_float_s_fu_769_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state67)))) begin
        stat_C_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        stat_C_ce0 = grp_hprod_fu_792_b_ce0;
    end else begin
        stat_C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        stat_C_d0 = grp_generic_tanh_float_s_fu_769_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        stat_C_d0 = 32'd0;
    end else begin
        stat_C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((grp_generic_tanh_float_s_fu_769_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state67)))) begin
        stat_C_we0 = 1'b1;
    end else begin
        stat_C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        vec_i_address0 = zext_ln134_1_fu_1263_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        vec_i_address0 = zext_ln127_1_fu_1191_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        vec_i_address0 = zext_ln120_1_fu_1136_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        vec_i_address0 = zext_ln113_1_fu_1081_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        vec_i_address0 = zext_ln108_1_fu_1041_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        vec_i_address0 = zext_ln106_1_fu_1013_p1;
    end else begin
        vec_i_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state15))) begin
        vec_i_ce0 = 1'b1;
    end else begin
        vec_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        vec_i_d0 = h_t_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        vec_i_d0 = input_r_q0;
    end else begin
        vec_i_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        vec_i_we0 = 1'b1;
    end else begin
        vec_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        vec_tmp_address0 = zext_ln34_1_reg_1672;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state74))) begin
        vec_tmp_address0 = vec_tmp_addr_4_reg_1636;
    end else if (((icmp_ln32_fu_1211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state64))) begin
        vec_tmp_address0 = zext_ln34_fu_1223_p1;
    end else if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state55))) begin
        vec_tmp_address0 = vec_tmp_addr_2_reg_1577;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state37))) begin
        vec_tmp_address0 = vec_tmp_addr_1_reg_1536;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state19))) begin
        vec_tmp_address0 = vec_tmp_addr_reg_1495;
    end else if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state13))) begin
        vec_tmp_address0 = grp_fill_n_fu_799_p_first_address0;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        vec_tmp_address0 = grp_hprod_fu_792_b_address0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        vec_tmp_address0 = grp_hprod_fu_792_res_address0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        vec_tmp_address0 = grp_geva_1_fu_782_a_address0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27))) begin
        vec_tmp_address0 = grp_geva_1_fu_782_res_address0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state84))) begin
        vec_tmp_address0 = grp_sigmoid_fu_763_a_address0;
    end else begin
        vec_tmp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state19) | ((grp_generic_tanh_float_s_fu_769_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state94)) | ((icmp_ln32_fu_1211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state64)))) begin
        vec_tmp_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state13))) begin
        vec_tmp_ce0 = grp_fill_n_fu_799_p_first_ce0;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        vec_tmp_ce0 = grp_hprod_fu_792_b_ce0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        vec_tmp_ce0 = grp_hprod_fu_792_res_ce0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        vec_tmp_ce0 = grp_geva_1_fu_782_a_ce0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27))) begin
        vec_tmp_ce0 = grp_geva_1_fu_782_res_ce0;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state84))) begin
        vec_tmp_ce0 = grp_sigmoid_fu_763_a_ce0;
    end else begin
        vec_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        vec_tmp_d0 = grp_generic_tanh_float_s_fu_769_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state26))) begin
        vec_tmp_d0 = reg_828;
    end else if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state13))) begin
        vec_tmp_d0 = grp_fill_n_fu_799_p_first_d0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        vec_tmp_d0 = grp_hprod_fu_792_res_d0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27))) begin
        vec_tmp_d0 = grp_geva_1_fu_782_res_d0;
    end else begin
        vec_tmp_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state26) | ((grp_generic_tanh_float_s_fu_769_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state94)))) begin
        vec_tmp_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state13))) begin
        vec_tmp_we0 = grp_fill_n_fu_799_p_first_we0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        vec_tmp_we0 = grp_hprod_fu_792_res_we0;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27))) begin
        vec_tmp_we0 = grp_geva_1_fu_782_res_we0;
    end else begin
        vec_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln67_fu_850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln68_fu_867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln69_fu_884_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln70_fu_901_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln71_fu_918_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln72_fu_935_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln78_fu_941_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln105_fu_987_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln107_fu_1018_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_fill_n_fu_799_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln113_fu_1052_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln113_1_fu_1069_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_geva_1_fu_782_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((grp_sigmoid_fu_763_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((grp_fill_n_fu_799_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((icmp_ln120_fu_1107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((icmp_ln120_1_fu_1124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state45 : begin
            if (((grp_geva_1_fu_782_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((grp_sigmoid_fu_763_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((grp_fill_n_fu_799_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((icmp_ln127_fu_1162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((icmp_ln127_1_fu_1179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state63 : begin
            if (((grp_geva_1_fu_782_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((icmp_ln32_fu_1211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((grp_generic_tanh_float_s_fu_769_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((grp_fill_n_fu_799_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            if (((icmp_ln134_fu_1234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state70 : begin
            if (((icmp_ln134_1_fu_1251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state82 : begin
            if (((grp_geva_1_fu_782_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            if (((grp_sigmoid_fu_763_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            if (((grp_hprod_fu_792_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            if (((grp_hprod_fu_792_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state88))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            if (((grp_geva_1_fu_782_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state90))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state91 : begin
            if (((icmp_ln32_1_fu_1283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state91))) begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            if (((grp_generic_tanh_float_s_fu_769_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state94))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        ap_ST_fsm_state95 : begin
            if (((grp_hprod_fu_792_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state95))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end
        end
        ap_ST_fsm_state96 : begin
            if (((icmp_ln762_fu_1305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state97 : begin
            if (((icmp_ln157_fu_1317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end
        end
        ap_ST_fsm_state98 : begin
            if (((icmp_ln157_1_fu_1346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state98))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state110 : begin
            if (((icmp_ln43_fu_1377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state110))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Bias_lc_address0 = zext_ln45_fu_1389_p1;

assign Weight0_c_address0 = zext_ln127_3_fu_1206_p1;

assign Weight0_f_address0 = zext_ln113_3_fu_1096_p1;

assign Weight0_i_address0 = zext_ln120_3_fu_1151_p1;

assign Weight0_o_address0 = zext_ln134_3_fu_1278_p1;

assign Weight_lc_address0 = zext_ln157_4_fu_1372_p1;

assign add_ln106_fu_999_p2 = (sub_ln106_reg_1451 + zext_ln105_fu_983_p1);

assign add_ln108_fu_1035_p2 = (j1_0_reg_549 + 8'd28);

assign add_ln113_1_fu_1046_p2 = (phi_mul_reg_572 + 15'd156);

assign add_ln113_fu_1090_p2 = (phi_mul_reg_572 + zext_ln113_2_fu_1086_p1);

assign add_ln120_1_fu_1101_p2 = (phi_mul889_reg_606 + 15'd156);

assign add_ln120_fu_1145_p2 = (phi_mul889_reg_606 + zext_ln120_2_fu_1141_p1);

assign add_ln127_1_fu_1156_p2 = (phi_mul891_reg_640 + 15'd156);

assign add_ln127_fu_1200_p2 = (phi_mul891_reg_640 + zext_ln127_2_fu_1196_p1);

assign add_ln134_1_fu_1228_p2 = (phi_mul893_reg_685 + 15'd156);

assign add_ln134_fu_1272_p2 = (phi_mul893_reg_685 + zext_ln134_2_fu_1268_p1);

assign add_ln157_fu_1367_p2 = (zext_ln157_2_reg_1703 + zext_ln157_3_fu_1363_p1);

assign add_ln67_fu_839_p2 = (phi_ln67_reg_460 + 7'd1);

assign add_ln68_fu_856_p2 = (phi_ln68_reg_471 + 7'd1);

assign add_ln69_fu_873_p2 = (phi_ln69_reg_482 + 7'd1);

assign add_ln70_fu_890_p2 = (phi_ln70_reg_493 + 7'd1);

assign add_ln71_fu_907_p2 = (phi_ln71_reg_504 + 7'd1);

assign add_ln72_fu_924_p2 = (phi_ln72_reg_515 + 7'd1);

assign add_ln762_fu_1311_p2 = (p_0_rec_i_i_reg_719 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign c_1_fu_1075_p2 = (c_0_reg_584 + 8'd1);

assign c_2_fu_1130_p2 = (c3_0_reg_618 + 8'd1);

assign c_3_fu_1185_p2 = (c5_0_reg_652 + 8'd1);

assign c_4_fu_1257_p2 = (c7_0_reg_697 + 8'd1);

assign c_fu_1352_p2 = (c9_0_reg_741 + 8'd1);

assign grp_fill_n_fu_799_ap_start = grp_fill_n_fu_799_ap_start_reg;

assign grp_generic_tanh_float_s_fu_769_ap_start = grp_generic_tanh_float_s_fu_769_ap_start_reg;

assign grp_geva_1_fu_782_ap_start = grp_geva_1_fu_782_ap_start_reg;

assign grp_hprod_fu_792_ap_start = grp_hprod_fu_792_ap_start_reg;

assign grp_sigmoid_fu_763_ap_start = grp_sigmoid_fu_763_ap_start_reg;

assign i_2_fu_1217_p2 = (i_0_i_reg_663 + 8'd1);

assign i_3_fu_947_p2 = (i_0_reg_526 + 5'd1);

assign i_4_fu_1289_p2 = (i_0_i9_reg_708 + 8'd1);

assign i_fu_1383_p2 = (i_0_i18_reg_752 + 4'd1);

assign icmp_ln105_fu_987_p2 = ((j_0_reg_537 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_1018_p2 = ((j1_0_reg_549 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln113_1_fu_1069_p2 = ((c_0_reg_584 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_1052_p2 = ((r_0_reg_561 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln120_1_fu_1124_p2 = ((c3_0_reg_618 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_1107_p2 = ((r2_0_reg_595 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln127_1_fu_1179_p2 = ((c5_0_reg_652 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln127_fu_1162_p2 = ((r4_0_reg_629 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln134_1_fu_1251_p2 = ((c7_0_reg_697 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln134_fu_1234_p2 = ((r6_0_reg_674 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln157_1_fu_1346_p2 = ((c9_0_reg_741 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln157_fu_1317_p2 = ((r8_0_reg_730 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_1283_p2 = ((i_0_i9_reg_708 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_1211_p2 = ((i_0_i_reg_663 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_1377_p2 = ((i_0_i18_reg_752 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_850_p2 = ((phi_ln67_reg_460 == 7'd127) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_867_p2 = ((phi_ln68_reg_471 == 7'd127) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_884_p2 = ((phi_ln69_reg_482 == 7'd127) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_901_p2 = ((phi_ln70_reg_493 == 7'd127) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_918_p2 = ((phi_ln71_reg_504 == 7'd127) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_935_p2 = ((phi_ln72_reg_515 == 7'd127) ? 1'b1 : 1'b0);

assign icmp_ln762_fu_1305_p2 = ((p_0_rec_i_i_reg_719 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_941_p2 = ((i_0_reg_526 == 5'd28) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln106_fu_1008_p1;

assign j_1_fu_1024_p2 = (j1_0_reg_549 + 8'd1);

assign j_fu_993_p2 = (j_0_reg_537 + 5'd1);

assign p_0_rec_i_i_cast_fu_1300_p1 = p_0_rec_i_i_reg_719;

assign r_1_fu_1058_p2 = (r_0_reg_561 + 8'd1);

assign r_2_fu_1113_p2 = (r2_0_reg_595 + 8'd1);

assign r_3_fu_1168_p2 = (r4_0_reg_629 + 8'd1);

assign r_4_fu_1240_p2 = (r6_0_reg_674 + 8'd1);

assign r_fu_1323_p2 = (r8_0_reg_730 + 4'd1);

assign sext_ln106_fu_1004_p1 = $signed(add_ln106_fu_999_p2);

assign shl_ln106_1_fu_965_p3 = {{i_0_reg_526}, {2'd0}};

assign shl_ln_fu_953_p3 = {{i_0_reg_526}, {5'd0}};

assign sub_ln106_fu_977_p2 = (zext_ln106_2_fu_961_p1 - zext_ln106_3_fu_973_p1);

assign tmp_5_fu_1334_p3 = {{r8_0_reg_730}, {7'd0}};

assign zext_ln105_fu_983_p1 = j_0_reg_537;

assign zext_ln106_1_fu_1013_p1 = j_0_reg_537;

assign zext_ln106_2_fu_961_p1 = shl_ln_fu_953_p3;

assign zext_ln106_3_fu_973_p1 = shl_ln106_1_fu_965_p3;

assign zext_ln106_fu_1008_p1 = $unsigned(sext_ln106_fu_1004_p1);

assign zext_ln108_1_fu_1041_p1 = add_ln108_fu_1035_p2;

assign zext_ln108_fu_1030_p1 = j1_0_reg_549;

assign zext_ln113_1_fu_1081_p1 = c_0_reg_584;

assign zext_ln113_2_fu_1086_p1 = c_0_reg_584;

assign zext_ln113_3_fu_1096_p1 = add_ln113_fu_1090_p2;

assign zext_ln113_fu_1064_p1 = r_0_reg_561;

assign zext_ln120_1_fu_1136_p1 = c3_0_reg_618;

assign zext_ln120_2_fu_1141_p1 = c3_0_reg_618;

assign zext_ln120_3_fu_1151_p1 = add_ln120_fu_1145_p2;

assign zext_ln120_fu_1119_p1 = r2_0_reg_595;

assign zext_ln127_1_fu_1191_p1 = c5_0_reg_652;

assign zext_ln127_2_fu_1196_p1 = c5_0_reg_652;

assign zext_ln127_3_fu_1206_p1 = add_ln127_fu_1200_p2;

assign zext_ln127_fu_1174_p1 = r4_0_reg_629;

assign zext_ln134_1_fu_1263_p1 = c7_0_reg_697;

assign zext_ln134_2_fu_1268_p1 = c7_0_reg_697;

assign zext_ln134_3_fu_1278_p1 = add_ln134_fu_1272_p2;

assign zext_ln134_fu_1246_p1 = r6_0_reg_674;

assign zext_ln157_1_fu_1358_p1 = c9_0_reg_741;

assign zext_ln157_2_fu_1342_p1 = tmp_5_fu_1334_p3;

assign zext_ln157_3_fu_1363_p1 = c9_0_reg_741;

assign zext_ln157_4_fu_1372_p1 = add_ln157_fu_1367_p2;

assign zext_ln157_fu_1329_p1 = r8_0_reg_730;

assign zext_ln34_1_fu_1295_p1 = i_0_i9_reg_708;

assign zext_ln34_fu_1223_p1 = i_0_i_reg_663;

assign zext_ln45_fu_1389_p1 = i_0_i18_reg_752;

assign zext_ln67_fu_845_p1 = phi_ln67_reg_460;

assign zext_ln68_fu_862_p1 = phi_ln68_reg_471;

assign zext_ln69_fu_879_p1 = phi_ln69_reg_482;

assign zext_ln70_fu_896_p1 = phi_ln70_reg_493;

assign zext_ln71_fu_913_p1 = phi_ln71_reg_504;

assign zext_ln72_fu_930_p1 = phi_ln72_reg_515;

always @ (posedge ap_clk) begin
    sub_ln106_reg_1451[1:0] <= 2'b00;
    zext_ln34_reg_1613[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln34_1_reg_1672[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln157_2_reg_1703[6:0] <= 7'b0000000;
    zext_ln157_2_reg_1703[11] <= 1'b0;
end

endmodule //infer
